{"version":3,"sources":["webpack:///webpack/bootstrap 1119ad009480e7d8672f","webpack:///../src/sdk/Exports.ts","webpack:///../src/common/Exports.ts","webpack:///../src/common.speech/Exports.ts","webpack:///../src/common/Error.ts","webpack:///../src/sdk/Contracts.ts","webpack:///../src/common/Guid.ts","webpack:///../src/common.browser/Exports.ts","webpack:///../src/common.speech/RecognitionEvents.ts","webpack:///../src/common/PlatformEvent.ts","webpack:///../src/common.speech/IAuthentication.ts","webpack:///../src/common/ConnectionMessage.ts","webpack:///../src/common/EventSource.ts","webpack:///../src/common/InMemoryStorage.ts","webpack:///../src/common/List.ts","webpack:///../src/common/Promise.ts","webpack:///../src/common/Queue.ts","webpack:///../src/sdk/Audio/AudioInputStream.ts","webpack:///../src/sdk/Audio/AudioStreamFormat.ts","webpack:///../src/common.speech/SpeechConnectionFactory.ts","webpack:///../src/common.browser/WebsocketMessageAdapter.ts","webpack:///./bundleApp.js","webpack:///../microsoft.cognitiveservices.speech.sdk.ts","webpack:///../src/common.browser/ConsoleLoggingListener.ts","webpack:///../src/common/AudioSourceEvents.ts","webpack:///../src/common/ConnectionEvents.ts","webpack:///../src/common/ConnectionOpenResponse.ts","webpack:///../src/common/Events.ts","webpack:///../src/common/IConnection.ts","webpack:///../src/common/RawWebsocketMessage.ts","webpack:///../src/common/RiffPcmEncoder.ts","webpack:///../src/common/Storage.ts","webpack:///../src/common/Stream.ts","webpack:///../src/common.speech/TranslationStatus.ts","webpack:///../src/common.browser/LocalStorage.ts","webpack:///../src/common.browser/MicAudioSource.ts","webpack:///../src/sdk/Audio/AudioConfig.ts","webpack:///../src/sdk/CancellationReason.ts","webpack:///../src/sdk/Audio/PullAudioInputStreamCallback.ts","webpack:///../src/sdk/KeywordRecognitionModel.ts","webpack:///../src/sdk/SessionEventArgs.ts","webpack:///../src/sdk/RecognitionEventArgs.ts","webpack:///../src/sdk/OutputFormat.ts","webpack:///../src/sdk/IntentRecognitionEventArgs.ts","webpack:///../src/sdk/RecognitionResult.ts","webpack:///../src/sdk/SpeechRecognitionResult.ts","webpack:///../src/sdk/IntentRecognitionResult.ts","webpack:///../src/sdk/LanguageUnderstandingModel.ts","webpack:///../src/sdk/SpeechRecognitionEventArgs.ts","webpack:///../src/sdk/SpeechRecognitionCanceledEventArgs.ts","webpack:///../src/sdk/TranslationRecognitionEventArgs.ts","webpack:///../src/sdk/TranslationSynthesisEventArgs.ts","webpack:///../src/sdk/TranslationRecognitionResult.ts","webpack:///../src/sdk/TranslationSynthesisResult.ts","webpack:///../src/sdk/ResultReason.ts","webpack:///../src/sdk/SpeechConfig.ts","webpack:///../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","webpack:///../src/common.speech/CognitiveTokenAuthentication.ts","webpack:///../src/common.speech/IntentConnectionFactory.ts","webpack:///../src/common.speech/Recognizer.ts","webpack:///../src/common.speech/ServiceTelemetryListener.Internal.ts","webpack:///../src/common.speech/SpeechConnectionMessage.Internal.ts","webpack:///../src/common.speech/RecognizerConfig.ts","webpack:///../src/common.speech/SpeechServiceInterfaces.ts","webpack:///../src/common.speech/WebsocketMessageFormatter.ts","webpack:///../src/common.speech/TranslationConnectionFactory.ts","webpack:///../src/common.speech/EnumTranslation.ts","webpack:///../src/sdk/SpeechTranslationConfig.ts","webpack:///../src/sdk/PropertyCollection.ts","webpack:///../src/sdk/PropertyId.ts","webpack:///../src/sdk/Recognizer.ts","webpack:///../src/sdk/SpeechRecognizer.ts","webpack:///../src/sdk/IntentRecognizer.ts","webpack:///../src/sdk/TranslationRecognizer.ts","webpack:///../src/sdk/Translations.ts","webpack:///../src/sdk/NoMatchReason.ts","webpack:///../src/sdk/NoMatchDetails.ts","webpack:///../src/sdk/TranslationRecognitionCanceledEventArgs.ts","webpack:///../src/sdk/IntentRecognitionCanceledEventArgs.ts","webpack:///../src/sdk/CancellationDetails.ts","webpack:///../src/common.browser/FileAudioSource.ts","webpack:///../src/common.browser/OpusRecorder.ts","webpack:///../src/common.browser/PCMRecorder.ts","webpack:///../src/common.browser/SessionStorage.ts","webpack:///../src/common.browser/Timer.ts","webpack:///../src/common.browser/WebsocketConnection.ts"],"names":[],"mappings":"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","file":"microsoft.cognitiveservices.speech.sdk.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1119ad009480e7d8672f","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig\";\r\nexport { AudioStreamFormat } from \"./Audio/AudioStreamFormat\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream\";\r\nexport { CancellationReason } from \"./CancellationReason\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs\";\r\nexport { OutputFormat } from \"./OutputFormat\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs\";\r\nexport { RecognitionResult } from \"./RecognitionResult\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel\";\r\nexport { SpeechRecognitionEventArgs } from \"./SpeechRecognitionEventArgs\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult\";\r\nexport { ResultReason } from \"./ResultReason\";\r\nexport { SpeechConfig } from \"./SpeechConfig\";\r\nexport { SpeechTranslationConfig } from \"./SpeechTranslationConfig\";\r\nexport { PropertyCollection } from \"./PropertyCollection\";\r\nexport { PropertyId } from \"./PropertyId\";\r\nexport { Recognizer } from \"./Recognizer\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer\";\r\nexport { Translations } from \"./Translations\";\r\nexport { NoMatchReason } from \"./NoMatchReason\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs\";\r\nexport { CancellationDetails } from \"./CancellationDetails\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport * from \"./AudioSourceEvents\";\r\nexport * from \"./ConnectionEvents\";\r\nexport * from \"./ConnectionMessage\";\r\nexport * from \"./ConnectionOpenResponse\";\r\nexport * from \"./Error\";\r\nexport * from \"./Events\";\r\nexport * from \"./EventSource\";\r\nexport * from \"./Guid\";\r\nexport * from \"./IAudioSource\";\r\nexport * from \"./IConnection\";\r\nexport * from \"./IDetachable\";\r\nexport * from \"./IDictionary\";\r\nexport * from \"./IDisposable\";\r\nexport * from \"./IEventSource\";\r\nexport * from \"./IKeyValueStorage\";\r\nexport * from \"./InMemoryStorage\";\r\nexport * from \"./ITimer\";\r\nexport * from \"./IWebsocketMessageFormatter\";\r\nexport * from \"./List\";\r\nexport * from \"./PlatformEvent\";\r\nexport * from \"./Promise\";\r\nexport * from \"./Queue\";\r\nexport * from \"./RawWebsocketMessage\";\r\nexport * from \"./RiffPcmEncoder\";\r\nexport * from \"./Storage\";\r\nexport * from \"./Stream\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n// IMPORTANT - Dont publish internal modules.\r\n\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./Recognizer\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Error.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Contracts.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nconst CreateGuid: () => string = (): string => {\r\n    let d = new Date().getTime();\r\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n\r\n    return guid;\r\n};\r\n\r\nconst CreateNoDashGuid: () => string = (): string => {\r\n    return CreateGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n};\r\n\r\nexport { CreateGuid, CreateNoDashGuid };\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Guid.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport * from \"./ConsoleLoggingListener\";\r\nexport * from \"./IRecorder\";\r\nexport * from \"./LocalStorage\";\r\nexport * from \"./MicAudioSource\";\r\nexport * from \"./FileAudioSource\";\r\nexport * from \"./OpusRecorder\";\r\nexport * from \"./PCMRecorder\";\r\nexport * from \"./SessionStorage\";\r\nexport * from \"./Timer\";\r\nexport * from \"./WebsocketConnection\";\r\nexport * from \"./WebsocketMessageAdapter\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    EventType,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    IDetailedSpeechPhrase,\r\n    IIntentResponse,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechEndDetectedResult,\r\n    ISpeechHypothesis,\r\n    ISpeechStartDetected,\r\n    ITranslationHypothesis,\r\n    ITranslationPhrase,\r\n    ITranslationSynthesisEnd,\r\n} from \"./Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private requestId: string;\r\n    private sessionId: string;\r\n\r\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.requestId = requestId;\r\n        this.sessionId = sessionId;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get SessionId(): string {\r\n        return this.sessionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechRecognitionResultEvent<TResult> extends SpeechRecognitionEvent {\r\n    private result: TResult;\r\n\r\n    constructor(eventName: string, requestId: string, sessionId: string, result: TResult) {\r\n        super(eventName, requestId, sessionId);\r\n        this.result = result;\r\n    }\r\n\r\n    public get Result(): TResult {\r\n        return this.result;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private authFetchEventid: string;\r\n\r\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.authFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get AuthFetchEventid(): string {\r\n        return this.authFetchEventid;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.authFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechStartDetectedEvent extends SpeechRecognitionResultEvent<ISpeechStartDetected> {\r\n    constructor(requestId: string, sessionId: string, result: ISpeechStartDetected) {\r\n        super(\"SpeechStartDetectedEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechHypothesisEvent extends SpeechRecognitionResultEvent<ISpeechHypothesis> {\r\n    constructor(requestId: string, sessionId: string, result: ISpeechHypothesis) {\r\n        super(\"SpeechHypothesisEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechFragmentEvent extends SpeechRecognitionResultEvent<ISpeechHypothesis> {\r\n    constructor(requestId: string, sessionId: string, result: ISpeechHypothesis) {\r\n        super(\"SpeechFragmentEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechEndDetectedEvent extends SpeechRecognitionResultEvent<ISpeechEndDetectedResult> {\r\n    constructor(requestId: string, sessionId: string, result: ISpeechEndDetectedResult) {\r\n        super(\"SpeechEndDetectedEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechSimplePhraseEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\r\n    constructor(requestId: string, sessionId: string, result: ISimpleSpeechPhrase) {\r\n        super(\"SpeechSimplePhraseEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechDetailedPhraseEvent extends SpeechRecognitionResultEvent<IDetailedSpeechPhrase> {\r\n    constructor(requestId: string, sessionId: string, result: IDetailedSpeechPhrase) {\r\n        super(\"SpeechDetailedPhraseEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationHypothesisEvent extends SpeechRecognitionResultEvent<ITranslationHypothesis> {\r\n    constructor(requestId: string, sessionId: string, result: ITranslationHypothesis) {\r\n        super(\"TranslationHypothesisEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationPhraseEvent extends SpeechRecognitionResultEvent<ITranslationPhrase> {\r\n    constructor(requestId: string, sessionId: string, result: ITranslationPhrase) {\r\n        super(\"TranslationPhraseEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationFailedEvent extends SpeechRecognitionResultEvent<ITranslationPhrase> {\r\n    constructor(requestId: string, sessionId: string, result: ITranslationPhrase) {\r\n        super(\"TranslationFailedEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionFailedEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\r\n    constructor(requestId: string, sessionId: string, result: ISimpleSpeechPhrase) {\r\n        super(\"RecognitionFailedEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationSynthesisEvent extends SpeechRecognitionResultEvent<ArrayBuffer> {\r\n    constructor(requestId: string, sessionId: string, result: ArrayBuffer) {\r\n        super(\"TranslationSynthesisEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationSynthesisErrorEvent extends SpeechRecognitionResultEvent<ITranslationSynthesisEnd> {\r\n    constructor(requestId: string, sessionId: string, result: ITranslationSynthesisEnd) {\r\n        super(\"TranslationSynthesisErrorEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentResponseEvent extends SpeechRecognitionResultEvent<IIntentResponse> {\r\n    constructor(requestId: string, sessionId: string, result: IIntentResponse) {\r\n        super(\"IntentResponseEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class InternalErrorEvent extends SpeechRecognitionResultEvent<string> {\r\n    constructor(requestId: string, sessionId: string, result: string) {\r\n        super(\"InternalErrorEvent\", requestId, sessionId, result);\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n    private serviceTag: string;\r\n    private status: RecognitionCompletionStatus;\r\n    private error: string;\r\n\r\n    constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.status = status;\r\n        this.error = error;\r\n        this.serviceTag = serviceTag;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n\r\n    public get ServiceTag(): string {\r\n        return this.serviceTag;\r\n    }\r\n\r\n    public get Status(): RecognitionCompletionStatus {\r\n        return this.status;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/RecognitionEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private name: string;\r\n    private eventId: string;\r\n    private eventTime: string;\r\n    private eventType: EventType;\r\n    private metadata: IStringDictionary<string>;\r\n\r\n    constructor(eventName: string, eventType: EventType) {\r\n        this.name = eventName;\r\n        this.eventId = CreateNoDashGuid();\r\n        this.eventTime = new Date().toISOString();\r\n        this.eventType = eventType;\r\n        this.metadata = { };\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get EventId(): string {\r\n        return this.eventId;\r\n    }\r\n\r\n    public get EventTime(): string {\r\n        return this.eventTime;\r\n    }\r\n\r\n    public get EventType(): EventType {\r\n        return this.eventType;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/PlatformEvent.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { Promise } from \"../common/Exports\";\r\n\r\nexport interface IAuthentication {\r\n    Fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private headerName: string;\r\n    private token: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.headerName = headerName;\r\n        this.token = token;\r\n    }\r\n\r\n    public get HeaderName(): string {\r\n        return this.headerName;\r\n    }\r\n\r\n    public get Token(): string {\r\n        return this.token;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/IAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private messageType: MessageType;\r\n    private headers: IStringDictionary<string>;\r\n    private body: any = null;\r\n\r\n    private id: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.body = body;\r\n        this.headers = headers ? headers : {};\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Headers(): any {\r\n        return this.headers;\r\n    }\r\n\r\n    public get Body(): any {\r\n        return this.body;\r\n    }\r\n\r\n    public get TextBody(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.body as string;\r\n    }\r\n\r\n    public get BinaryBody(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.body;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionMessage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private metadata: IStringDictionary<string>;\r\n    private isDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.metadata = metadata;\r\n    }\r\n\r\n    public OnEvent = (event: TEvent): void => {\r\n        if (this.IsDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.Metadata) {\r\n            for (const paramName in this.Metadata) {\r\n                if (paramName) {\r\n                    if (event.Metadata) {\r\n                        if (!event.Metadata[paramName]) {\r\n                            event.Metadata[paramName] = this.Metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.eventListeners) {\r\n            if (eventId && this.eventListeners[eventId]) {\r\n                this.eventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = CreateNoDashGuid();\r\n        this.eventListeners[id] = onEventCallback;\r\n        return {\r\n            Detach: () => {\r\n                delete this.eventListeners[id];\r\n            },\r\n        };\r\n    }\r\n\r\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.Attach(listener.OnEvent);\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.eventListeners = null;\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/EventSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\n\r\nexport class InMemoryStorage implements IKeyValueStorage {\r\n\r\n    private store: IStringDictionary<string> = {};\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] === undefined) {\r\n            this.store[key] = valueToAdd;\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        this.store[key] = value;\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] !== undefined) {\r\n            delete this.store[key];\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/InMemoryStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    Get(itemIndex: number): TItem;\r\n    First(): TItem;\r\n    Last(): TItem;\r\n\r\n    Add(item: TItem): void;\r\n    InsertAt(index: number, item: TItem): void;\r\n\r\n    RemoveFirst(): TItem;\r\n    RemoveLast(): TItem;\r\n    RemoveAt(index: number): TItem;\r\n    Remove(index: number, count: number): TItem[];\r\n    Clear(): void;\r\n\r\n    Length(): number;\r\n\r\n    OnAdded(addedCallback: () => void): IDetachable;\r\n    OnRemoved(removedCallback: () => void): IDetachable;\r\n    OnDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    Join(seperator?: string): string;\r\n\r\n    ToArray(): TItem[];\r\n\r\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    All(callback: (item: TItem) => boolean): boolean;\r\n    ForEach(callback: (item: TItem, index: number) => void): void;\r\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    Clone(): List<TItem>;\r\n    Concat(list: List<TItem>): List<TItem>;\r\n    ConcatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private list: TItem[];\r\n    private subscriptionIdCounter: number = 0;\r\n    private addSubscriptions: IStringDictionary<() => void> = {};\r\n    private removeSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.list = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.list.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Get = (itemIndex: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.list[itemIndex];\r\n    }\r\n\r\n    public First = (): TItem => {\r\n        return this.Get(0);\r\n    }\r\n\r\n    public Last = (): TItem => {\r\n        return this.Get(this.Length() - 1);\r\n    }\r\n\r\n    public Add = (item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        this.InsertAt(this.list.length, item);\r\n    }\r\n\r\n    public InsertAt = (index: number, item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        if (index === 0) {\r\n            this.list.unshift(item);\r\n        } else if (index === this.list.length) {\r\n            this.list.push(item);\r\n        } else {\r\n            this.list.splice(index, 0, item);\r\n        }\r\n        this.TriggerSubscriptions(this.addSubscriptions);\r\n    }\r\n\r\n    public RemoveFirst = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(0);\r\n    }\r\n\r\n    public RemoveLast = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(this.Length() - 1);\r\n    }\r\n\r\n    public RemoveAt = (index: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.Remove(index, 1)[0];\r\n    }\r\n\r\n    public Remove = (index: number, count: number): TItem[] => {\r\n        this.ThrowIfDisposed();\r\n        const removedElements = this.list.splice(index, count);\r\n        this.TriggerSubscriptions(this.removeSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public Clear = (): void => {\r\n        this.ThrowIfDisposed();\r\n        this.Remove(0, this.Length());\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.length;\r\n    }\r\n\r\n    public OnAdded = (addedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.addSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.addSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.removeSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.removeSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.disposedSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public Join = (seperator?: string): string => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.join(seperator);\r\n    }\r\n\r\n    public ToArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.list.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        if (callback) {\r\n            return this.Where(callback).Length() > 0;\r\n        } else {\r\n            return this.Length() > 0;\r\n        }\r\n    }\r\n\r\n    public All = (callback: (item: TItem) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        return this.Where(callback).Length() === this.Length();\r\n    }\r\n\r\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.ThrowIfDisposed();\r\n        for (let i = 0; i < this.Length(); i++) {\r\n            callback(this.list[i], i);\r\n        }\r\n    }\r\n\r\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.ThrowIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            selectList.push(callback(this.list[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            if (callback(this.list[i], i)) {\r\n                filteredList.Add(this.list[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const clonedArray = this.ToArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public Clone = (): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.ToArray());\r\n    }\r\n\r\n    public Concat = (list: List<TItem>): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(list.ToArray()));\r\n    }\r\n\r\n    public ConcatArray = (array: TItem[]): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(array));\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.list == null;\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        if (!this.IsDisposed()) {\r\n            this.disposeReason = reason;\r\n            this.list = null;\r\n            this.addSubscriptions = null;\r\n            this.removeSubscriptions = null;\r\n            this.TriggerSubscriptions(this.disposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private ThrowIfDisposed = (): void => {\r\n        if (this.IsDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\r\n        }\r\n    }\r\n\r\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/List.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    Result(): PromiseResult<T>;\r\n\r\n    ContinueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    ContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    Finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    State(): PromiseState;\r\n\r\n    Promise(): IPromise<T>;\r\n\r\n    Resolve(result: T): IDeferred<T>;\r\n\r\n    Reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected isCompleted: boolean;\r\n    protected isError: boolean;\r\n    protected error: string;\r\n    protected result: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.On((result: T) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = false;\r\n                this.result = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = true;\r\n                this.error = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public get IsError(): boolean {\r\n        return this.isError;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n\r\n    public get Result(): T {\r\n        return this.result;\r\n    }\r\n\r\n    public ThrowIfError = (): void => {\r\n        if (this.IsError) {\r\n            throw this.Error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private onSetResult: (result: T) => void;\r\n    private onSetError: (error: string) => void;\r\n\r\n    public SetResult = (result: T): void => {\r\n        this.onSetResult(result);\r\n    }\r\n\r\n    public SetError = (error: string): void => {\r\n        this.onSetError(error);\r\n    }\r\n\r\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.onSetResult = onSetResult;\r\n        this.onSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.Resolve(true);\r\n                } else {\r\n                    deferred.Reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.On((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Resolve(result);\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Reject(error);\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n\r\n    private sink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.sink = sink;\r\n    }\r\n\r\n    public Result = (): PromiseResult<T> => {\r\n        return this.sink.Result;\r\n    }\r\n\r\n    public ContinueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public ContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public On = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.sink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public Finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.On(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n\r\n    private promise: Promise<T>;\r\n    private sink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.sink = new Sink<T>();\r\n        this.promise = new Promise<T>(this.sink);\r\n    }\r\n\r\n    public State = (): PromiseState => {\r\n        return this.sink.State;\r\n    }\r\n\r\n    public Promise = (): Promise<T> => {\r\n        return this.promise;\r\n    }\r\n\r\n    public Resolve = (result: T): Deferred<T> => {\r\n        this.sink.Resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public Reject = (error: string): Deferred<T> => {\r\n        this.sink.Reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n\r\n    private state: PromiseState = PromiseState.None;\r\n    private promiseResult: PromiseResult<T> = null;\r\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private successHandlers: Array<((result: T) => void)> = [];\r\n    private errorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.promiseResultEvents = new PromiseResultEventSource();\r\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\r\n    }\r\n\r\n    public get State(): PromiseState {\r\n        return this.state;\r\n    }\r\n\r\n    public get Result(): PromiseResult<T> {\r\n        return this.promiseResult;\r\n    }\r\n\r\n    public Resolve = (result: T): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Resolved;\r\n        this.promiseResultEvents.SetResult(result);\r\n\r\n        for (let i = 0; i < this.successHandlers.length; i++) {\r\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public Reject = (error: string): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Rejected;\r\n        this.promiseResultEvents.SetError(error);\r\n\r\n        for (const errorHandler of this.errorHandlers) {\r\n            this.ExecuteErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.state === PromiseState.None) {\r\n            this.successHandlers.push(successCallback);\r\n            this.errorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.state === PromiseState.Resolved) {\r\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\r\n            } else if (this.state === PromiseState.Rejected) {\r\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n    }\r\n\r\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private DetachHandlers = (): void => {\r\n        this.errorHandlers = [];\r\n        this.successHandlers = [];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Promise.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\r\n\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    Enqueue(item: TItem): void;\r\n    EnqueueFromPromise(promise: Promise<TItem>): void;\r\n    Dequeue(): Promise<TItem>;\r\n    Peek(): Promise<TItem>;\r\n    Length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private list: List<TItem>;\r\n    private detachables: IDetachable[];\r\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private isDrainInProgress: boolean = false;\r\n    private isDisposing: boolean = false;\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.list = list ? list : new List<TItem>();\r\n        this.detachables = [];\r\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.detachables.push(this.list.OnAdded(this.Drain));\r\n    }\r\n\r\n    public Enqueue = (item: TItem): void => {\r\n        this.ThrowIfDispose();\r\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\r\n    }\r\n\r\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.ThrowIfDispose();\r\n        this.promiseStore.Add(promise);\r\n        promise.Finally(() => {\r\n            while (this.promiseStore.Length() > 0) {\r\n                if (!this.promiseStore.First().Result().IsCompleted) {\r\n                    break;\r\n                } else {\r\n                    const p = this.promiseStore.RemoveFirst();\r\n                    if (!p.Result().IsError) {\r\n                        this.list.Add(p.Result().Result);\r\n                    } else {\r\n                        // TODO: Log as warning.\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public Dequeue = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.subscribers) {\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.Drain();\r\n        }\r\n\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Peek = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.subscribers;\r\n        if (subs) {\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.Drain();\r\n        }\r\n\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDispose();\r\n        return this.list.Length();\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.subscribers == null;\r\n    }\r\n\r\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n        if (!this.IsDisposed() && !this.isDisposing) {\r\n            this.disposeReason = reason;\r\n            this.isDisposing = true;\r\n\r\n            const subs = this.subscribers;\r\n            if (subs) {\r\n                while (subs.Length() > 0) {\r\n                    const subscriber = subs.RemoveFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.Resolve(undefined);\r\n                    // subscriber.deferral.Reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.subscribers === subs) {\r\n                    this.subscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\r\n                return PromiseHelper\r\n                    .WhenAll(this.promiseStore.ToArray())\r\n                    .ContinueWith(() => {\r\n                        this.subscribers = null;\r\n                        this.list.ForEach((item: TItem, index: number): void => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.list = null;\r\n                        return true;\r\n                    });\r\n            } else {\r\n                this.subscribers = null;\r\n                this.list = null;\r\n            }\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        this.DrainAndDispose(null, reason);\r\n    }\r\n\r\n    private Drain = (): void => {\r\n        if (!this.isDrainInProgress && !this.isDisposing) {\r\n            this.isDrainInProgress = true;\r\n\r\n            const subs = this.subscribers;\r\n            const lists = this.list;\r\n            if (subs && lists) {\r\n                while (lists.Length() > 0 && subs.Length() > 0 && !this.isDisposing) {\r\n                    const subscriber = subs.RemoveFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.Resolve(lists.First());\r\n                    } else {\r\n                        const dequeuedItem = lists.RemoveFirst();\r\n                        subscriber.deferral.Resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.subscribers === subs) {\r\n                    this.subscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.list === lists) {\r\n                    this.list = lists;\r\n                }\r\n            }\r\n\r\n            this.isDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private ThrowIfDispose = (): void => {\r\n        if (this.IsDisposed()) {\r\n            if (this.disposeReason) {\r\n                throw new InvalidOperationError(this.disposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.isDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Queue.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { CreateNoDashGuid } from \"../../../src/common/Guid\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\nconst bufferSize: number = 4096;\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private format: AudioStreamFormat;\r\n    private id: string;\r\n    private events: EventSource<AudioSourceEvent>;\r\n    private stream: Stream<ArrayBuffer> = new Stream<ArrayBuffer>();\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.format = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.format = format;\r\n        }\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.id = CreateNoDashGuid();\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.format;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        // Break the data up into smaller chunks if needed.\r\n        let i: number;\r\n\r\n        for (i = bufferSize - 1; i < dataBuffer.byteLength; i += bufferSize) {\r\n            this.stream.Write(dataBuffer.slice(i - (bufferSize - 1), i));\r\n        }\r\n\r\n        this.stream.Write(dataBuffer.slice(i - (bufferSize - 1), dataBuffer.byteLength - 1));\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.stream.Close();\r\n    }\r\n\r\n    public Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public TurnOn(): Promise<boolean> {\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                // For now we support a single parallel reader of the pushed stream.\r\n                // So we can simiply hand the stream to the recognizer and let it recognize.\r\n\r\n                return this.stream.GetReader();\r\n            })\r\n            .OnSuccessContinueWith((streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach(audioNodeId: string): void {\r\n        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n    }\r\n\r\n    public TurnOff(): Promise<boolean> {\r\n        return PromiseHelper.FromResult(false);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private callback: PullAudioInputStreamCallback;\r\n    private format: AudioStreamFormat;\r\n    private id: string;\r\n    private events: EventSource<AudioSourceEvent>;\r\n    private isClosed: boolean;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.format = AudioStreamFormat.getDefaultInputFormat();\r\n        } else {\r\n            this.format = format;\r\n        }\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.id = CreateNoDashGuid();\r\n        this.callback = callback;\r\n        this.isClosed = false;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.format;\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.isClosed = true;\r\n        this.callback.close();\r\n    }\r\n\r\n    public Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public TurnOn(): Promise<boolean> {\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith((result: boolean) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n\r\n                return {\r\n                    Detach: () => {\r\n                        this.callback.close();\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                        const readBuff: ArrayBuffer = new ArrayBuffer(bufferSize);\r\n                        const pulledBytes: number = this.callback.read(readBuff);\r\n\r\n                        return PromiseHelper.FromResult<IStreamChunk<ArrayBuffer>>({\r\n                            Buffer: readBuff.slice(0, pulledBytes),\r\n                            IsEnd: this.isClosed,\r\n                        });\r\n                    },\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    public Detach(audioNodeId: string): void {\r\n        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n    }\r\n\r\n    public TurnOff(): Promise<boolean> {\r\n        return PromiseHelper.FromResult(false);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioInputStream.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1) {\r\n        super();\r\n        this.formatTag = 1;\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioStreamFormat.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class SpeechConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n\r\n            switch (config.RecognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    endpoint = this.Host(region) + this.ConversationRelativeUri;\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = this.Host(region) + this.DictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = this.Host(region) + this.InteractiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase(),\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(region: string): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://\" + region + \".stt.speech.microsoft.com\");\r\n    }\r\n\r\n    private get InteractiveRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get ConversationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get DictationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechConnectionFactory.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    SendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n\r\n    private connectionState: ConnectionState;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private websocketClient: WebSocket;\r\n\r\n    private sendMessageQueue: Queue<ISendItem>;\r\n    private receivingMessageQueue: Queue<ConnectionMessage>;\r\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private disconnectDeferral: Deferred<boolean>;\r\n    private connectionEvents: EventSource<ConnectionEvent>;\r\n    private connectionId: string;\r\n    private uri: string;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.connectionEvents = new EventSource<ConnectionEvent>();\r\n        this.connectionId = connectionId;\r\n        this.messageFormatter = messageFormatter;\r\n        this.connectionState = ConnectionState.None;\r\n        this.uri = uri;\r\n    }\r\n\r\n    public get State(): ConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        if (this.connectionEstablishDeferral) {\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n            this.websocketClient = new WebSocket(this.uri);\r\n            this.websocketClient.binaryType = \"arraybuffer\";\r\n            this.receivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.disconnectDeferral = new Deferred<boolean>();\r\n            this.sendMessageQueue = new Queue<ISendItem>();\r\n            this.ProcessSendQueue();\r\n        } catch (error) {\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(500, error));\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\r\n\r\n        this.websocketClient.onopen = (e: Event) => {\r\n            this.connectionState = ConnectionState.Connected;\r\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\r\n        };\r\n\r\n        this.websocketClient.onerror = (e: Event) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.connectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.websocketClient.onclose = (e: CloseEvent) => {\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                this.connectionState = ConnectionState.Disconnected;\r\n                // this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.OnClose(e.code, e.reason);\r\n        };\r\n\r\n        this.websocketClient.onmessage = (e: MessageEvent) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.connectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.connectionEstablishDeferral.Promise();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\r\n\r\n        this.messageFormatter\r\n            .FromConnectionMessage(message)\r\n            .On((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.Resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    SendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.Promise();\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        return this.receivingMessageQueue.Dequeue();\r\n    }\r\n\r\n    public Close = (reason?: string): Promise<boolean> => {\r\n        if (this.websocketClient) {\r\n            if (this.connectionState !== ConnectionState.Disconnected) {\r\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.Resolve(true);\r\n            return deferral.Promise();\r\n        }\r\n\r\n        return this.disconnectDeferral.Promise();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionEvents;\r\n    }\r\n\r\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return PromiseHelper.FromResult(true);\r\n            }\r\n\r\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\r\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\r\n            return PromiseHelper.FromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private OnClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.disconnectDeferral.Resolve(true);\r\n        this.receivingMessageQueue.Dispose(reason);\r\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private ProcessSendQueue = (): void => {\r\n        this.sendMessageQueue\r\n            .Dequeue()\r\n            .On((sendItem: ISendItem) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n\r\n                this.SendRawMessage(sendItem)\r\n                    .On((result: boolean) => {\r\n                        sendItem.SendStatusDeferral.Resolve(result);\r\n                        this.ProcessSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.SendStatusDeferral.Reject(sendError);\r\n                        this.ProcessSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: ConnectionEvent): void => {\r\n        this.connectionEvents.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/WebsocketMessageAdapter.ts","window.SpeechSDK = require('./distrib/microsoft.cognitiveservices.speech.sdk.js');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./bundleApp.js\n// module id = 20\n// module chunks = 0","import { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\r\nimport { Events, Storage } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.Instance.AttachListener(new ConsoleLoggingListener());\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../microsoft.cognitiveservices.speech.sdk.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private logLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.logLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public OnEvent = (event: PlatformEvent): void => {\r\n        if (event.EventType >= this.logLevelFilter) {\r\n            const log = this.ToString(event);\r\n\r\n            switch (event.EventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private ToString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/ConsoleLoggingListener.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private audioSourceId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.audioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private error: string;\r\n    constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private audioNodeId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private error: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/AudioSourceEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private connectionId: string;\r\n\r\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.connectionId = connectionId;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private uri: string;\r\n    private headers: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.uri = uri;\r\n        this.headers = headers;\r\n    }\r\n\r\n    public get Uri(): string {\r\n        return this.uri;\r\n    }\r\n\r\n    public get Headers(): IStringDictionary<string> {\r\n        return this.headers;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private reason: string;\r\n    private statusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.reason = reason;\r\n        this.statusCode = statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.statusCode = statuscode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private networkReceivedTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.networkReceivedTime = networkReceivedTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkReceivedTime(): string {\r\n        return this.networkReceivedTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private networkSentTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.networkSentTime = networkSentTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkSentTime(): string {\r\n        return this.networkSentTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport class ConnectionOpenResponse {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(statusCode: number, reason: string) {\r\n        this.statusCode = statusCode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionOpenResponse.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.instance = eventSource;\r\n    }\r\n\r\n    public static get Instance(): IEventSource<PlatformEvent> {\r\n        return Events.instance;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Events.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { Promise } from \"./Promise\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection extends IDisposable {\r\n    Id: string;\r\n    State(): ConnectionState;\r\n    Open(): Promise<ConnectionOpenResponse>;\r\n    Send(message: ConnectionMessage): Promise<boolean>;\r\n    Read(): Promise<ConnectionMessage>;\r\n    Events: EventSource<ConnectionEvent>;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/IConnection.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n\r\n    private messageType: MessageType;\r\n    private payload: any = null;\r\n    private id: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.payload = payload;\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Payload(): any {\r\n        return this.payload;\r\n    }\r\n\r\n    public get TextContent(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.payload as string;\r\n    }\r\n\r\n    public get BinaryContent(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.payload;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/RawWebsocketMessage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private actualSampleRate: number;\r\n    private desiredSampleRate: number;\r\n    private channelCount: number = 1;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.actualSampleRate = actualSampleRate;\r\n        this.desiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public Encode = (\r\n        needHeader: boolean,\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        if (!needHeader) {\r\n            const buffer = new ArrayBuffer(audioLength);\r\n            const view = new DataView(buffer);\r\n            this.FloatTo16BitPCM(view, 0, audioFrame);\r\n\r\n            return buffer;\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(44 + audioLength);\r\n\r\n        const bitsPerSample = 16;\r\n        const bytesPerSample = bitsPerSample / 8;\r\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\r\n        const fileLength = 0;\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(buffer);\r\n\r\n        /* RIFF identifier */\r\n        this.SetString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, fileLength, true);\r\n        /* RIFF type & Format */\r\n        this.SetString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channelCount, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.desiredSampleRate, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channelCount * bytesPerSample, true);\r\n        /* bits per sample */\r\n        view.setUint16(34, bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.SetString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, fileLength, true);\r\n\r\n        this.FloatTo16BitPCM(view, 44, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private SetString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private DownSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/RiffPcmEncoder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\nimport { InMemoryStorage } from \"./InMemoryStorage\";\r\n\r\nexport class Storage {\r\n    private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\r\n    private static localStorage: IKeyValueStorage = new InMemoryStorage();\r\n\r\n    public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\r\n        if (!sessionStorage) {\r\n            throw new ArgumentNullError(\"sessionStorage\");\r\n        }\r\n\r\n        Storage.sessionStorage = sessionStorage;\r\n    }\r\n\r\n    public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\r\n        if (!localStorage) {\r\n            throw new ArgumentNullError(\"localStorage\");\r\n        }\r\n\r\n        Storage.localStorage = localStorage;\r\n    }\r\n\r\n    public static get Session(): IKeyValueStorage {\r\n        return Storage.sessionStorage;\r\n    }\r\n\r\n    public static get Local(): IKeyValueStorage {\r\n        return Storage.localStorage;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Storage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { Promise } from \"./Promise\";\r\nimport { Queue } from \"./Queue\";\r\nimport { IStreamChunk } from \"./Stream\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    IsEnd: boolean;\r\n    Buffer: TBuffer;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private id: string;\r\n    private readerIdCounter: number = 1;\r\n    private streambuffer: Array<IStreamChunk<TBuffer>>;\r\n    private isEnded: boolean = false;\r\n    private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.id = streamId ? streamId : CreateNoDashGuid();\r\n        this.streambuffer = [];\r\n        this.readerQueues = {};\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isEnded;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public Write = (buffer: TBuffer): void => {\r\n        this.ThrowIfClosed();\r\n        this.WriteStreamChunk({\r\n            Buffer: buffer,\r\n            IsEnd: false,\r\n        });\r\n    }\r\n\r\n    public GetReader = (): StreamReader<TBuffer> => {\r\n        const readerId = this.readerIdCounter;\r\n        this.readerIdCounter++;\r\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        const currentLength = this.streambuffer.length;\r\n        this.readerQueues[readerId] = readerQueue;\r\n        for (let i = 0; i < currentLength; i++) {\r\n            readerQueue.Enqueue(this.streambuffer[i]);\r\n        }\r\n        return new StreamReader(\r\n            this.id,\r\n            readerQueue,\r\n            () => {\r\n                delete this.readerQueues[readerId];\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isEnded) {\r\n            this.WriteStreamChunk({\r\n                Buffer: null,\r\n                IsEnd: true,\r\n            });\r\n            this.isEnded = true;\r\n        }\r\n    }\r\n\r\n    private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\r\n        this.ThrowIfClosed();\r\n        this.streambuffer.push(streamChunk);\r\n        for (const readerId in this.readerQueues) {\r\n            if (!this.readerQueues[readerId].IsDisposed()) {\r\n                try {\r\n                    this.readerQueues[readerId].Enqueue(streamChunk);\r\n                } catch (e) {\r\n                    // Do nothing\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ThrowIfClosed = (): void => {\r\n        if (this.isEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class StreamReader<TBuffer> {\r\n    private readerQueue: Queue<IStreamChunk<TBuffer>>;\r\n    private onClose: () => void;\r\n    private isClosed: boolean = false;\r\n    private streamId: string;\r\n\r\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\r\n        this.readerQueue = readerQueue;\r\n        this.onClose = onClose;\r\n        this.streamId = streamId;\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isClosed;\r\n    }\r\n\r\n    public get StreamId(): string {\r\n        return this.streamId;\r\n    }\r\n\r\n    public Read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.IsClosed) {\r\n            throw new InvalidOperationError(\"StreamReader closed\");\r\n        }\r\n\r\n        return this.readerQueue\r\n            .Dequeue()\r\n            .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk.IsEnd) {\r\n                    this.readerQueue.Dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isClosed) {\r\n            this.isClosed = true;\r\n            this.readerQueue.Dispose(\"StreamReader closed\");\r\n            this.onClose();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Stream.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/TranslationStatus.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class LocalStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = localStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            localStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/LocalStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport { AudioStreamFormat } from \"../../src/sdk/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigatorUserMedia extends NavigatorUserMedia {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<AudioSourceEvent>;\r\n\r\n    private initializeDeferral: Deferred<boolean>;\r\n\r\n    private recorder: IRecorder;\r\n\r\n    private mediaStream: MediaStream;\r\n\r\n    private context: AudioContext;\r\n\r\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.recorder = recorder;\r\n    }\r\n\r\n    public get Format(): AudioStreamFormat {\r\n        return MicAudioSource.AUDIOFORMAT;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (this.initializeDeferral) {\r\n            return this.initializeDeferral.Promise();\r\n        }\r\n\r\n        this.initializeDeferral = new Deferred<boolean>();\r\n\r\n        this.CreateAudioContext();\r\n\r\n        const nav = window.navigator as INavigatorUserMedia;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.initializeDeferral.Reject(errorMsg);\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n                getUserMedia(\r\n                    { audio: true, video: false },\r\n                    (mediaStream: MediaStream) => {\r\n                        this.mediaStream = mediaStream;\r\n                        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n                        this.initializeDeferral.Resolve(true);\r\n                    }, (error: MediaStreamError) => {\r\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                        const tmp = this.initializeDeferral;\r\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\r\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\r\n                        // without a lot of code replication.\r\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\r\n                        this.initializeDeferral = null;\r\n                        tmp.Reject(errorMsg); // this will bubble up through the whole chain of promises,\r\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\r\n                        // The following line is not guaranteed to be executed.\r\n                        this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\r\n                    });\r\n            };\r\n\r\n            if (this.context.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.context.resume().then(next, (reason: any) => {\r\n                    this.initializeDeferral.Reject(`Failed to initialize audio context: ${reason}`);\r\n                });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.initializeDeferral.Promise();\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        this.initializeDeferral = null;\r\n\r\n        this.DestroyAudioContext();\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                try {\r\n                    this.recorder.Record(this.context, this.mediaStream, stream);\r\n                } catch (error) {\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\r\n                    throw error;\r\n                }\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n\r\n    private CreateAudioContext = (): void => {\r\n        if (!!this.context) {\r\n            return;\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        const AudioContext = ((window as any).AudioContext)\r\n            || ((window as any).webkitAudioContext)\r\n            || false;\r\n\r\n        if (!AudioContext) {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n\r\n        this.context = new AudioContext();\r\n    }\r\n\r\n    private DestroyAudioContext = (): void => {\r\n        if (!this.context) {\r\n            return;\r\n        }\r\n\r\n        this.recorder.ReleaseMediaResources(this.context);\r\n\r\n        if (\"close\" in this.context) {\r\n            this.context.close();\r\n            this.context = null;\r\n        } else if (this.context.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            this.context.suspend();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/MicAudioSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { AudioStreamFormat } from \"../../../src/sdk/Exports\";\r\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\r\nimport { AudioSourceEvent, EventSource, IAudioSource, IAudioStreamNode, Promise } from \"../../common/exports\";\r\nimport { AudioInputStream, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private source: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.source = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.source.Format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.source.TurnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Id\r\n     * @function\r\n     * @public\r\n     */\r\n    public Id(): string {\r\n        return this.source.Id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.TurnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public TurnOn(): Promise<boolean> {\r\n        return this.source.TurnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.source.Attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public Detach(audioNodeId: string): void {\r\n        return this.Detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.TurnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public TurnOff(): Promise<boolean> {\r\n        return this.source.TurnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.source.Events;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition. Use getErrorDetails() contains detailed error response.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/CancellationReason.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/PullAudioInputStreamCallback.ts","import { Contracts } from \"./Contracts\";\r\n\r\n//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private disposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     *                 Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     *                 Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.disposed = true;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/KeywordRecognitionModel.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SessionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/RecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/OutputFormat.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { IntentRecognitionResult, PropertyCollection, RecognitionEventArgs, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second incements.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second incements.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a brief description of an occurred error.\r\n     * This field is only filled-out if the recognition status (@see RecognitionStatus) is set to Canceled.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/RecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"../common/Error\";\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/LanguageUnderstandingModel.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection, RecognitionEventArgs, ResultReason, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { CancellationReason, RecognitionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class SpeechRecognitionCanceledEventArgs\r\n */\r\nexport class SpeechRecognitionCanceledEventArgs extends RecognitionEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member SpeechRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member SpeechRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionCanceledEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationSynthesisEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents a translation result in one of target languages, where the key\r\n     * is the name of the target language, in BCP-47 format, and the value is the translation text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionResult.ts","import { ResultReason } from \"./ResultReason\";\r\n\r\n//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationSynthesisResult.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/ResultReason.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * the language setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Returns the current authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(vale: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Sets output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple])];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private authInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.fetchCallback = fetchCallback;\r\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/CognitiveTokenAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Promise,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    SpeechResultFormat,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class IntentConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n\r\n            endpoint = this.Host() + Storage.Local.GetOrAdd(\"TranslationRelativeUri\", \"/speech/\" + this.GetSpeechRegionFromIntentRegion(region) + \"/recognition/interactive/cognitiveservices/v1\");\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n\r\n    private GetSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/IntentConnectionFactory.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDetachable,\r\n    IDisposable,\r\n    IEventSource,\r\n    IStreamChunk,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    OutputFormat, ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    IDetailedSpeechPhrase,\r\n    IIntentResponse,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechEndDetectedResult,\r\n    ISpeechHypothesis,\r\n    ISpeechStartDetected,\r\n    ITranslationHypothesis,\r\n    ITranslationPhrase,\r\n    ITranslationSynthesisEnd,\r\n    ITurnStart,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus2,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    IntentResponseEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n    RecognitionFailedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechDetailedPhraseEvent,\r\n    SpeechEndDetectedEvent,\r\n    SpeechFragmentEvent,\r\n    SpeechHypothesisEvent,\r\n    SpeechRecognitionEvent,\r\n    SpeechSimplePhraseEvent,\r\n    SpeechStartDetectedEvent,\r\n    TranslationFailedEvent,\r\n    TranslationHypothesisEvent,\r\n    TranslationPhraseEvent,\r\n    TranslationSynthesisErrorEvent,\r\n    TranslationSynthesisEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private authentication: IAuthentication;\r\n    private connectionFactory: IConnectionFactory;\r\n    private connection: IConnection;\r\n    private audioSource: IAudioSource;\r\n    private speechConfigConnectionId: string;\r\n    private connectionFetchPromise: Promise<IConnection>;\r\n    private connectionId: string;\r\n    private authFetchEventId: string;\r\n    private isDisposed: boolean;\r\n    protected recognizerConfig: RecognizerConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.authentication = authentication;\r\n        this.connectionFactory = connectionFactory;\r\n        this.audioSource = audioSource;\r\n        this.recognizerConfig = recognizerConfig;\r\n        this.isDisposed = false;\r\n    }\r\n\r\n    public get AudioSource(): IAudioSource {\r\n        return this.audioSource;\r\n    }\r\n\r\n    public IsDisposed(): boolean {\r\n        return this.isDisposed;\r\n    }\r\n    public Dispose(reason?: string): void {\r\n        this.isDisposed = true;\r\n        if (this.connection) {\r\n            this.connection.Dispose(reason);\r\n            this.connection = undefined;\r\n        }\r\n    }\r\n\r\n    public Recognize = (onEventCallback: (event: SpeechRecognitionEvent) => void, speechContextJson?: string): Promise<boolean> => {\r\n        const requestSession = this.GetSession(this.audioSource.Id(), onEventCallback);\r\n\r\n        requestSession.ListenForServiceTelemetry(this.audioSource.Events);\r\n\r\n        return this.audioSource\r\n            .Attach(requestSession.AudioNodeId)\r\n            .ContinueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                if (result.IsError) {\r\n                    requestSession.OnAudioSourceAttachCompleted(null, true, result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAudioSourceAttachCompleted(result.Result, false);\r\n                }\r\n\r\n                const audioNode = result.Result;\r\n\r\n                return this.FetchConnection(requestSession)\r\n                    .OnSuccessContinueWithPromise((connection: IConnection) => {\r\n                        const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession);\r\n                        const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.PlatformConfig.Serialize())\r\n                            .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\r\n                                    .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                        return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\r\n                                    });\r\n                            });\r\n\r\n                        const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\r\n\r\n                        completionPromise.On((r: boolean) => {\r\n                            requestSession.Dispose();\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        }, (error: string) => {\r\n                            requestSession.Dispose(error);\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        });\r\n\r\n                        return completionPromise;\r\n                    }).OnSuccessContinueWithPromise((_: boolean) => {\r\n                        return requestSession.CompletionPromise;\r\n                    });\r\n            });\r\n    }\r\n\r\n    protected abstract GetSession(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void): RequestSessionBase;\r\n\r\n    protected abstract ProcessTypeSpecificMessages(message: SpeechConnectionMessage, session: RequestSessionBase, connection: IConnection): void;\r\n\r\n    protected SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\r\n        return connection\r\n            .Send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n    }\r\n\r\n    private FetchConnection = (requestSession: RequestSessionBase, isUnAuthorized: boolean = false): Promise<IConnection> => {\r\n        if (this.connectionFetchPromise) {\r\n            if (this.connectionFetchPromise.Result().IsError\r\n                || this.connectionFetchPromise.Result().Result.State() === ConnectionState.Disconnected) {\r\n                this.connectionId = null;\r\n                this.connectionFetchPromise = null;\r\n                return this.FetchConnection(requestSession);\r\n            } else {\r\n                requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n                requestSession.OnConnectionEstablishCompleted(200);\r\n                requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\r\n                return this.connectionFetchPromise;\r\n            }\r\n        }\r\n\r\n        this.authFetchEventId = CreateNoDashGuid();\r\n        this.connectionId = CreateNoDashGuid();\r\n\r\n        requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\r\n\r\n        this.connectionFetchPromise = authPromise\r\n            .ContinueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.IsError) {\r\n                    requestSession.OnAuthCompleted(true, result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAuthCompleted(false);\r\n                }\r\n\r\n                if (this.connection) {\r\n                    this.connection.Dispose();\r\n                    this.connection = undefined;\r\n                }\r\n\r\n                this.connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\r\n                requestSession.ListenForServiceTelemetry(this.connection.Events);\r\n\r\n                return this.connection.Open().OnSuccessContinueWithPromise((response: ConnectionOpenResponse) => {\r\n                    if (response.StatusCode === 200) {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode);\r\n                        return PromiseHelper.FromResult(this.connection);\r\n                    } else if (response.StatusCode === 403 && !isUnAuthorized) {\r\n                        return this.FetchConnection(requestSession, true);\r\n                    } else {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\r\n                        return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.connectionFetchPromise;\r\n    }\r\n\r\n    private ReceiveMessage = (connection: IConnection, requestSession: RequestSessionBase): Promise<boolean> => {\r\n        return connection\r\n            .Read()\r\n            .OnSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!message) {\r\n                    return PromiseHelper.FromResult(true);\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.FromConnectionMessage(message);\r\n\r\n                if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\r\n                    switch (connectionMessage.Path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            requestSession.OnServiceTurnStartResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.startdetected\":\r\n                            requestSession.OnServiceSpeechStartDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.fragment\":\r\n                            requestSession.OnServiceSpeechFragmentResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.enddetected\":\r\n                            if (connectionMessage.TextBody.length > 0) {\r\n                                requestSession.OnServiceSpeechEndDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                            } else {\r\n                                // If the request was empty, the JSON returned is empty.\r\n                                requestSession.OnServiceSpeechEndDetectedResponse({ Offset: 0 });\r\n                            }\r\n                            break;\r\n                        case \"turn.end\":\r\n                            requestSession.OnServiceTurnEndResponse();\r\n                            return PromiseHelper.FromResult(true);\r\n                        default:\r\n                            this.ProcessTypeSpecificMessages(connectionMessage, requestSession, connection);\r\n                    }\r\n                }\r\n\r\n                return this.ReceiveMessage(connection, requestSession);\r\n            });\r\n    }\r\n\r\n    private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\r\n        if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\r\n            this.speechConfigConnectionId = this.connectionId;\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.config\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\r\n        if (speechContextJson) {\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.context\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechContextJson));\r\n        }\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendAudio = (\r\n        requestId: string,\r\n        connection: IConnection,\r\n        audioStreamNode: IAudioStreamNode,\r\n        requestSession: RequestSessionBase): Promise<boolean> => {\r\n        // NOTE: Home-baked promises crash ios safari during the invocation\r\n        // of the error callback chain (looks like the recursion is way too deep, and\r\n        // it blows up the stack). The following construct is a stop-gap that does not\r\n        // bubble the error up the callback chain and hence circumvents this problem.\r\n        // TODO: rewrite with ES6 promises.\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        // The time we last sent data to the service.\r\n        let lastSendTime: number = 0;\r\n\r\n        const audioFormat: AudioStreamFormatImpl = this.audioSource.Format as AudioStreamFormatImpl;\r\n\r\n        const readAndUploadCycle = (_: boolean) => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.isDisposed && !requestSession.IsSpeechEnded && !requestSession.IsCompleted) {\r\n                audioStreamNode.Read().On(\r\n                    (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                        // we have a new audio chunk to upload.\r\n                        if (requestSession.IsSpeechEnded) {\r\n                            // If service already recognized audio end then dont send any more audio\r\n                            deferred.Resolve(true);\r\n                            return;\r\n                        }\r\n\r\n                        const payload = (audioStreamChunk.IsEnd) ? null : audioStreamChunk.Buffer;\r\n                        const uploaded = connection.Send(\r\n                            new SpeechConnectionMessage(\r\n                                MessageType.Binary, \"audio\", requestId, null, payload));\r\n\r\n                        if (!audioStreamChunk.IsEnd) {\r\n\r\n                            // Caculate any delay to the audio stream needed. /2 to allow 2x real time transmit rate max.\r\n                            const minSendTime = ((payload.byteLength / audioFormat.avgBytesPerSec) / 2) * 1000;\r\n\r\n                            const delay: number = Math.max(0, (lastSendTime - Date.now() + minSendTime));\r\n\r\n                            uploaded.OnSuccessContinueWith((result: boolean) => {\r\n                                setTimeout(() => {\r\n                                    lastSendTime = Date.now();\r\n                                    readAndUploadCycle(result);\r\n                                }, delay);\r\n                            });\r\n                        } else {\r\n                            // the audio stream has been closed, no need to schedule next\r\n                            // read-upload cycle.\r\n                            deferred.Resolve(true);\r\n                        }\r\n                    },\r\n                    (error: string) => {\r\n                        if (requestSession.IsSpeechEnded) {\r\n                            // For whatever reason, Reject is used to remove queue subscribers inside\r\n                            // the Queue.DrainAndDispose invoked from DetachAudioNode down blow, which\r\n                            // means that sometimes things can be rejected in normal circumstances, without\r\n                            // any errors.\r\n                            deferred.Resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                        } else {\r\n                            // Only reject, if there was a proper error.\r\n                            deferred.Reject(error);\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        readAndUploadCycle(true);\r\n\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig);\r\n    }\r\n\r\n    protected GetSession(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void): RequestSessionBase {\r\n        return new SpeechRequestSession(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(connectionMessage: SpeechConnectionMessage, session: RequestSessionBase, connection: IConnection): void {\r\n        const requestSession: SpeechRequestSession = session as SpeechRequestSession;\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n                if (this.recognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                } else {\r\n                    requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nenum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig);\r\n    }\r\n\r\n    protected GetSession(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void): RequestSessionBase {\r\n        return new TranslationRequestSession(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(connectionMessage: SpeechConnectionMessage, session: RequestSessionBase, connection: IConnection): void {\r\n        const requestSession: TranslationRequestSession = session as TranslationRequestSession;\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                requestSession.OnServiceTranslationHypothesisResponse(JSON.parse(connectionMessage.TextBody));\r\n                break;\r\n            case \"translation.phrase\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                const translatedPhrase: ITranslationPhrase = JSON.parse(connectionMessage.TextBody);\r\n\r\n                // Make sure the reason is an enumn and not a string.\r\n                const status2: string = \"\" + translatedPhrase.RecognitionStatus;\r\n                const recstatus2 = (RecognitionStatus2 as any)[status2];\r\n\r\n                if (recstatus2 === RecognitionStatus2.Success) {\r\n                    // OK, the recognition was successful. How'd the translation do?\r\n                    if ((TranslationStatus as any)[translatedPhrase.Translation.TranslationStatus] === TranslationStatus.Success) {\r\n                        requestSession.OnServiceTranslationPhraseResponse(translatedPhrase);\r\n                    } else {\r\n                        requestSession.OnServiceTranslationErrorResponse(translatedPhrase);\r\n                    }\r\n                    break;\r\n                } else {\r\n                    // Hate to reparse it, but the data types are different.\r\n                    requestSession.OnServiceRecognitionErrorResponse(JSON.parse(connectionMessage.TextBody));\r\n                }\r\n                break;\r\n            case \"translation.synthesis\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                requestSession.OnServiceTranslationSynthesis(connectionMessage.BinaryBody);\r\n                break;\r\n            case \"translation.synthesis.end\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                const synthEnd: ITranslationSynthesisEnd = JSON.parse(connectionMessage.TextBody);\r\n                const status3: string = \"\" + synthEnd.SynthesisStatus;\r\n                const synthStatus = (SynthesisStatus as any)[status3];\r\n\r\n                switch (synthStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        synthEnd.SynthesisStatus = ResultReason.Canceled;\r\n                        requestSession.OnServiceTranslationSynthesisError(synthEnd);\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        synthEnd.SynthesisStatus = ResultReason.SynthesizingAudio;\r\n                        requestSession.OnServiceTranslationSynthesis(undefined);\r\n                        break;\r\n                    default:\r\n                        synthEnd.SynthesisStatus = ResultReason.SynthesizingAudioCompleted;\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig);\r\n    }\r\n\r\n    protected GetSession(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void): RequestSessionBase {\r\n        return new IntentRequestSession(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(connectionMessage: SpeechConnectionMessage, session: RequestSessionBase, connection: IConnection): void {\r\n        const requestSession: IntentRequestSession = session as IntentRequestSession;\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n                if (this.recognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                } else {\r\n                    requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                }\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                if (connectionMessage.TextBody === \"\") {\r\n                    // The query to LUIS failed, and nothing came back.\r\n                    requestSession.OnServiceIntentResponse(null);\r\n                } else {\r\n                    requestSession.OnServiceIntentResponse(JSON.parse(connectionMessage.TextBody));\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class RequestSessionBase {\r\n    private isDisposed: boolean = false;\r\n    private serviceTelemetryListener: ServiceTelemetryListener;\r\n    private detachables: IDetachable[] = new Array<IDetachable>();\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private audioNode: IAudioStreamNode;\r\n    private authFetchEventId: string;\r\n    private serviceTag: string;\r\n    private isAudioNodeDetached: boolean = false;\r\n    private isCompleted: boolean = false;\r\n    private onEventCallback: (event: SpeechRecognitionEvent) => void;\r\n\r\n    private requestCompletionDeferral: Deferred<boolean>;\r\n\r\n    protected sessionId: string;\r\n\r\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n        this.audioSourceId = audioSourceId;\r\n        this.onEventCallback = onEventCallback;\r\n        this.requestId = CreateNoDashGuid();\r\n        this.audioNodeId = CreateNoDashGuid();\r\n        this.requestCompletionDeferral = new Deferred<boolean>();\r\n\r\n        this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\r\n\r\n        this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.sessionId, this.audioSourceId, this.audioNodeId));\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get CompletionPromise(): Promise<boolean> {\r\n        return this.requestCompletionDeferral.Promise();\r\n    }\r\n\r\n    public get IsSpeechEnded(): boolean {\r\n        return this.isAudioNodeDetached;\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public ListenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\r\n    }\r\n\r\n    public OnAudioSourceAttachCompleted = (audioNode: IAudioStreamNode, isError: boolean, error?: string): void => {\r\n        this.audioNode = audioNode;\r\n        if (isError) {\r\n            this.OnComplete(RecognitionCompletionStatus.AudioSourceError, error);\r\n        } else {\r\n            this.OnEvent(new ListeningStartedEvent(this.requestId, this.sessionId, this.audioSourceId, this.audioNodeId));\r\n        }\r\n    }\r\n\r\n    public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.sessionId = connectionId;\r\n        this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.sessionId));\r\n    }\r\n\r\n    public OnAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.OnComplete(RecognitionCompletionStatus.AuthTokenFetchError, error);\r\n        }\r\n    }\r\n\r\n    public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.sessionId));\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.OnComplete(RecognitionCompletionStatus.UnAuthorized, reason);\r\n        } else {\r\n            this.OnComplete(RecognitionCompletionStatus.ConnectError, reason);\r\n        }\r\n    }\r\n\r\n    public OnServiceTurnStartResponse = (response: ITurnStart): void => {\r\n        if (response && response.context && response.context.serviceTag) {\r\n            this.serviceTag = response.context.serviceTag;\r\n        }\r\n    }\r\n\r\n    public OnServiceSpeechStartDetectedResponse = (result: ISpeechStartDetected): void => {\r\n        this.OnEvent(new SpeechStartDetectedEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceSpeechFragmentResponse = (result: ISpeechHypothesis): void => {\r\n        this.OnEvent(new SpeechFragmentEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceSpeechEndDetectedResponse = (result: ISpeechEndDetectedResult): void => {\r\n        this.DetachAudioNode();\r\n        this.OnEvent(new SpeechEndDetectedEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceTurnEndResponse = (): void => {\r\n        this.OnComplete(RecognitionCompletionStatus.Success);\r\n    }\r\n\r\n    public OnConnectionError = (error: string): void => {\r\n        this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\r\n    }\r\n\r\n    public Dispose = (error?: string): void => {\r\n        if (!this.isDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.isDisposed = true;\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            this.serviceTelemetryListener.Dispose();\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        return this.serviceTelemetryListener.GetTelemetry();\r\n    }\r\n\r\n    protected OnEvent = (event: SpeechRecognitionEvent): void => {\r\n        this.serviceTelemetryListener.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n        if (this.onEventCallback) {\r\n            this.onEventCallback(event);\r\n        }\r\n    }\r\n\r\n    private OnComplete = (status: RecognitionCompletionStatus, error?: string): void => {\r\n        if (!this.isCompleted) {\r\n            this.isCompleted = true;\r\n            this.DetachAudioNode();\r\n            this.OnEvent(new RecognitionEndedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.sessionId, this.serviceTag, status, error ? error : \"\"));\r\n        }\r\n    }\r\n\r\n    private DetachAudioNode = (): void => {\r\n        if (!this.isAudioNodeDetached) {\r\n            this.isAudioNodeDetached = true;\r\n            if (this.audioNode) {\r\n                this.audioNode.Detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass SpeechRequestSession extends RequestSessionBase {\r\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n        super(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    public OnServiceSpeechHypothesisResponse = (result: ISpeechHypothesis): void => {\r\n        this.OnEvent(new SpeechHypothesisEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceSimpleSpeechPhraseResponse = (result: ISimpleSpeechPhrase): void => {\r\n        this.OnEvent(new SpeechSimplePhraseEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceDetailedSpeechPhraseResponse = (result: IDetailedSpeechPhrase): void => {\r\n        this.OnEvent(new SpeechDetailedPhraseEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass TranslationRequestSession extends RequestSessionBase {\r\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n        super(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    public OnServiceTranslationHypothesisResponse = (result: ITranslationHypothesis): void => {\r\n        this.OnEvent(new TranslationHypothesisEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceTranslationPhraseResponse = (result: ITranslationPhrase): void => {\r\n        this.OnEvent(new TranslationPhraseEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceTranslationErrorResponse = (result: ITranslationPhrase): void => {\r\n        this.OnEvent(new TranslationFailedEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceRecognitionErrorResponse = (result: ISimpleSpeechPhrase): void => {\r\n        this.OnEvent(new RecognitionFailedEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceTranslationSynthesis = (result: ArrayBuffer): void => {\r\n        this.OnEvent(new TranslationSynthesisEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n\r\n    public OnServiceTranslationSynthesisError = (result: ITranslationSynthesisEnd): void => {\r\n        this.OnEvent(new TranslationSynthesisErrorEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass IntentRequestSession extends SpeechRequestSession {\r\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n        super(audioSourceId, onEventCallback);\r\n    }\r\n\r\n    public OnServiceIntentResponse = (result: IIntentResponse): void => {\r\n        this.OnEvent(new IntentResponseEvent(this.RequestId, this.sessionId, result));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/Recognizer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    RecognitionTriggeredEvent,\r\n} from \"./RecognitionEvents\";\r\n\r\ninterface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\ninterface IMetric {\r\n    End: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name: string;\r\n    Start: string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private isDisposed: boolean = false;\r\n\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    private listeningTriggerMetric: IMetric = null;\r\n    private micMetric: IMetric = null;\r\n    private connectionEstablishMetric: IMetric = null;\r\n\r\n    private micStartTime: string;\r\n\r\n    private connectionId: string;\r\n    private connectionStartTime: string;\r\n\r\n    private receivedMessages: IStringDictionary<string[]>;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.requestId = requestId;\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n\r\n        this.receivedMessages = {};\r\n    }\r\n\r\n    public OnEvent = (e: PlatformEvent): void => {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\r\n            this.listeningTriggerMetric = {\r\n                End: e.EventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.EventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\r\n            this.connectionId = e.SessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\r\n            this.connectionStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Error: this.GetConnectionError(e.StatusCode),\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\r\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\r\n                if (!this.receivedMessages[e.Message.Headers.path]) {\r\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.listeningTriggerMetric) {\r\n            metrics.push(this.listeningTriggerMetric);\r\n        }\r\n\r\n        if (this.micMetric) {\r\n            metrics.push(this.micMetric);\r\n        }\r\n\r\n        if (this.connectionEstablishMetric) {\r\n            metrics.push(this.connectionEstablishMetric);\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.receivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.receivedMessages = {};\r\n        this.listeningTriggerMetric = null;\r\n        this.micMetric = null;\r\n        this.connectionEstablishMetric = null;\r\n\r\n        return json;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    private GetConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceTelemetryListener.Internal.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    IStringDictionary,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\n\r\nconst PathHeaderName: string = \"path\";\r\nconst ContentTypeHeaderName: string = \"content-type\";\r\nconst RequestIdHeaderName: string = \"x-requestid\";\r\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private path: string;\r\n    private requestId: string;\r\n    private contentType: string;\r\n    private additionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[PathHeaderName] = path;\r\n        headers[RequestIdHeaderName] = requestId;\r\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[ContentTypeHeaderName] = contentType;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.path = path;\r\n        this.requestId = requestId;\r\n        this.contentType = contentType;\r\n        this.additionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get Path(): string {\r\n        return this.path;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get ContentType(): string {\r\n        return this.contentType;\r\n    }\r\n\r\n    public get AdditionalHeaders(): IStringDictionary<string> {\r\n        return this.additionalHeaders;\r\n    }\r\n\r\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.Headers) {\r\n            for (const headerName in message.Headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                        path = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                        requestId = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                        requestTimestamp = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                        contentType = message.Headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.Headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.MessageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.Body,\r\n            additionalHeaders,\r\n            message.Id);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechConnectionMessage.Internal.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private platformConfig: PlatformConfig;\r\n    private recognitionActivityTimeout: number;\r\n    private speechConfig: PropertyCollection;\r\n\r\n    constructor(\r\n        platformConfig: PlatformConfig,\r\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\r\n        speechConfig: PropertyCollection) {\r\n        this.platformConfig = platformConfig ? platformConfig : new PlatformConfig(new Context(null, null));\r\n        this.recognitionMode = recognitionMode;\r\n        this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.speechConfig = speechConfig;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.speechConfig;\r\n    }\r\n\r\n    public get RecognitionMode(): RecognitionMode {\r\n        return this.recognitionMode;\r\n    }\r\n\r\n    public get PlatformConfig(): PlatformConfig {\r\n        return this.platformConfig;\r\n    }\r\n\r\n    public get RecognitionActivityTimeout(): number {\r\n        return this.recognitionActivityTimeout;\r\n    }\r\n\r\n    public get IsContinuousRecognition(): boolean {\r\n        return this.recognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PlatformConfig {\r\n    private context: Context;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public Serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Context {\r\n    private system: System;\r\n    private os: OS;\r\n    private device: Device;\r\n\r\n    constructor(os: OS, device: Device) {\r\n        this.system = new System();\r\n        this.os = os;\r\n        this.device = device;\r\n    }\r\n\r\n    public get System(): System {\r\n        return this.system;\r\n    }\r\n\r\n    public get OS(): OS {\r\n        return this.os;\r\n    }\r\n\r\n    public get Device(): Device {\r\n        return this.device;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class System {\r\n    private version: string;\r\n    constructor() {\r\n        // TODO: Tie this with the sdk Version somehow\r\n        this.version = \"1.0.00000\";\r\n    }\r\n    public get Version(): string {\r\n        // Controlled by sdk\r\n        return this.version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class OS {\r\n\r\n    private platform: string;\r\n    private name: string;\r\n    private version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Platform(): string {\r\n        return this.platform;\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Device {\r\n\r\n    private manufacturer: string;\r\n    private model: string;\r\n    private version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Manufacturer(): string {\r\n        return this.manufacturer;\r\n    }\r\n\r\n    public get Model(): string {\r\n        return this.model;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/RecognizerConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { RecognitionCompletionStatus } from \"../../src/common.speech/Exports\";\r\nimport { ResultReason } from \"../sdk/Exports\";\r\nimport { TranslationStatus } from \"./TranslationStatus\";\r\n\r\nexport enum RecognitionStatus2 {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n}\r\n\r\n// speech.endDetected\r\nexport interface ISpeechStartDetected {\r\n    Offset?: number;\r\n}\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n}\r\n\r\nexport interface ITranslations {\r\n    TranslationStatus: TranslationStatus;\r\n    Translations: ITranslation[];\r\n    FailureReason: string;\r\n}\r\n\r\nexport interface ITranslation {\r\n    Language: string;\r\n    Text: string;\r\n}\r\n\r\nexport interface ISpeechEndDetectedResult {\r\n    Offset?: number;\r\n}\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus2;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n}\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus2;\r\n    Offset: number;\r\n    Duration: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus2;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n}\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus: ResultReason;\r\n    FailureReason: string;\r\n}\r\n\r\n// response\r\nexport interface IIntentResponse {\r\n    query: string;\r\n    topScoringIntent: ISingleIntent;\r\n    entities: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\n// turn.start\r\nexport interface ITurnStart {\r\n    context: ITurnStartContext;\r\n}\r\n\r\nexport interface ITurnStartContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface IResultErrorDetails {\r\n    errorText: string;\r\n    recogSate: RecognitionCompletionStatus;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechServiceInterfaces.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public ToConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const textMessage: string = message.TextContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.ParseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.BinaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.ParseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    public FromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\r\n\r\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\r\n\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const headersString = this.MakeHeaders(message);\r\n                const content = message.BinaryBody;\r\n\r\n                const headerInt8Array = new Int8Array(this.StringToArrayBuffer(headersString));\r\n\r\n                const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\r\n                const dataView = new DataView(payload);\r\n\r\n                dataView.setInt16(0, headerInt8Array.length);\r\n\r\n                for (let i = 0; i < headerInt8Array.byteLength; i++) {\r\n                    dataView.setInt8(2 + i, headerInt8Array[i]);\r\n                }\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    for (let i = 0; i < bodyInt8Array.byteLength; i++) {\r\n                        dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\r\n                    }\r\n                }\r\n\r\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    private MakeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.Headers) {\r\n            for (const header in message.Headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.Headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private ParseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private StringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/WebsocketMessageFormatter.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class TranslationConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n\r\n            endpoint = this.Host(region) + Storage.Local.GetOrAdd(\"TranslationRelativeUri\", \"/speech/translation/cognitiveservices/v1\");\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(region: string): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://\" + region + \".s2s.speech.microsoft.com\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/TranslationConnectionFactory.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationReason,\r\n    ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    RecognitionStatus2,\r\n} from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus2): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        const recognitionStatus2: string = \"\" + recognitionStatus;\r\n        const recstatus2 = (RecognitionStatus2 as any)[recognitionStatus2];\r\n        switch (recstatus2) {\r\n            case RecognitionStatus2.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus2.NoMatch:\r\n            case RecognitionStatus2.InitialSilenceTimeout:\r\n            case RecognitionStatus2.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus2.EndOfDictation:\r\n            case RecognitionStatus2.Error:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus2): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        const recognitionStatus2: string = \"\" + recognitionStatus;\r\n        const recstatus2 = (RecognitionStatus2 as any)[recognitionStatus2];\r\n        switch (recstatus2) {\r\n            case RecognitionStatus2.Success:\r\n            case RecognitionStatus2.EndOfDictation:\r\n            case RecognitionStatus2.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus2.InitialSilenceTimeout:\r\n            case RecognitionStatus2.BabbleTimeout:\r\n            case RecognitionStatus2.Error:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/EnumTranslation.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Contracts,\r\n} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expipres, the caller needs to refresh it by setting the property authorizationToken with a new valid token.\r\n     * Otherwise, all the recognizers created by this SpeechTranslationConfig instance will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by the speechRecognitionLanguage property,\r\n     * the language setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Returns the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n    private speechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.speechProperties = new PropertyCollection();\r\n\r\n    }\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.speechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.speechProperties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple])];\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.speechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.speechProperties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, value);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    /**\r\n     * Allows for setting arbitrary properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string, value: string): void {\r\n        this.properties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Allows for retrieving arbitrary property values.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.speechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.speechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechTranslationConfig.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private keys: string[] = [] as string[];\r\n    private values: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            if (this.keys[n] === keyToUse) {\r\n                return this.values[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            if (this.keys[n] === keyToUse) {\r\n                this.values[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.keys.push(keyToUse);\r\n        this.values.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            clonedMap.keys.push(this.keys[n]);\r\n            clonedMap.values.push(this.values[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/PropertyCollection.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * Subscription key.\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * Endpoint.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * Region.\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * Authorization token.\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * Authorization type.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * Endpoint ID.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * Translation to languages.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * Translation output voice.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * Intent region.\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * Recognition mode.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * Recognition language.\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * Session id.\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * Detailed result required.\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * Profanity filtering required.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * JSON in result.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * Error details.\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * Cancellation reason.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * Cancellation text.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * Cancellation detailed text.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * JSON result of language understanding service.\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/PropertyId.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    Device,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    PlatformConfig,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechRecognitionEvent,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    InternalErrorEvent,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n} from \"../common.speech/RecognitionEvents\";\r\nimport {\r\n    Promise,\r\n    PromiseHelper,\r\n} from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private disposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n\r\n        this.disposed = false;\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            // disconnect\r\n        }\r\n\r\n        this.disposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    protected abstract CreateRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig;\r\n\r\n    protected abstract CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Setup the recognizer\r\n    protected implRecognizerSetup(recognitionMode: RecognitionMode, speechProperties: PropertyCollection, audioConfig: AudioConfig, speechConnectionFactory: IConnectionFactory): ServiceRecognizerBase {\r\n\r\n        const recognizerConfig = this.CreateRecognizerConfig(\r\n            new PlatformConfig(\r\n                new Context(\r\n                    new OS(\"navigator.userAgent\", \"Browser\", null),\r\n                    new Device(\"Microsoft\", \"SpeechSDK\", \"1.0.0\"))), // TODO: Need to get these values from the caller?\r\n            recognitionMode); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)\r\n\r\n        const subscriptionKey = speechProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = subscriptionKey ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.FromResult(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.FromResult(authorizationToken);\r\n                });\r\n\r\n        return this.CreateServiceRecognizer(\r\n            authentication,\r\n            speechConnectionFactory,\r\n            audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    // Start the recognition\r\n    protected implRecognizerStart(recognizer: ServiceRecognizerBase, cb: (event: SpeechRecognitionEvent) => void, speechContext?: string): void {\r\n        recognizer.Recognize((event: SpeechRecognitionEvent) => {\r\n            if (this.disposed) {\r\n                return;\r\n            }\r\n\r\n            let sessionStartStopEventArgs: SessionEventArgs;\r\n            let speechStartStopEventArgs: RecognitionEventArgs;\r\n\r\n            /*\r\n                Alternative syntax for typescript devs.\r\n                if (event instanceof SDK.RecognitionTriggeredEvent)\r\n            */\r\n            // TODO: The mapping of internal service events to API surface events is... bad. Needs to be cleaned up to have a common mapping\r\n            // that's understandable.\r\n            switch (event.Name) {\r\n                case \"RecognitionTriggeredEvent\":\r\n                case \"ListeningStartedEvent\":\r\n                    // Internal events, ignore\r\n                    break;\r\n\r\n                case \"RecognitionStartedEvent\": // Fires when the client connects to the service successfuly.\r\n                    sessionStartStopEventArgs = new SessionEventArgs(event.SessionId);\r\n\r\n                    if (!!this.sessionStarted) {\r\n                        this.sessionStarted(this, sessionStartStopEventArgs);\r\n                    }\r\n                    break;\r\n\r\n                case \"RecognitionEndedEvent\":\r\n                    const recoEndedEvent = event as RecognitionEndedEvent;\r\n\r\n                    sessionStartStopEventArgs = new SessionEventArgs(recoEndedEvent.SessionId);\r\n                    if (recoEndedEvent.Status !== RecognitionCompletionStatus.Success) {\r\n                        if (cb) {\r\n                            cb(event); // call continuation, if configured.\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.sessionStopped) {\r\n                        this.sessionStopped(this, sessionStartStopEventArgs);\r\n                    }\r\n                    break;\r\n\r\n                case \"SpeechStartDetectedEvent\":\r\n                    speechStartStopEventArgs = new RecognitionEventArgs(0 /*TODO*/, event.SessionId);\r\n\r\n                    if (!!this.speechStartDetected) {\r\n                        this.speechStartDetected(this, speechStartStopEventArgs);\r\n                    }\r\n                    break;\r\n\r\n                case \"SpeechEndDetectedEvent\":\r\n                    speechStartStopEventArgs = new RecognitionEventArgs(0 /*TODO*/, event.SessionId);\r\n\r\n                    if (!!this.speechEndDetected) {\r\n                        this.speechEndDetected(this, speechStartStopEventArgs);\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if (cb) {\r\n                        cb(event); // call continuation, if configured.\r\n                    }\r\n            }\r\n        }, speechContext).On(\r\n            /* tslint:disable:no-empty */\r\n            (result: boolean): void => { },\r\n            (error: string): void => {\r\n                if (!!cb) {\r\n                    // Internal error with service communication.\r\n                    const errorEvent: InternalErrorEvent = new InternalErrorEvent(undefined, undefined, \"Runtime error: \" + error);\r\n                    cb(errorEvent);\r\n                }\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Recognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IDetailedSpeechPhrase,\r\n    InternalErrorEvent,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechHypothesis,\r\n    OutputFormatPropertyName,\r\n    PlatformConfig,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n    RecognitionMode,\r\n    RecognitionStatus2,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechRecognitionEvent,\r\n    SpeechRecognitionResultEvent,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationReason,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private disposedSpeechRecognizer: boolean = false;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n\r\n        Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized. The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized, so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Interactive,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new SpeechConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedSpeechRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, cb, err);\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new SpeechConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedSpeechRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, undefined, undefined);\r\n            });\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposedSpeechRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implCloseExistingRecognizer();\r\n            this.disposedSpeechRecognizer = true;\r\n        }\r\n\r\n        super.dispose(disposing);\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            recognitionMode,\r\n            this.properties);\r\n    }\r\n\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig);\r\n    }\r\n\r\n    // tslint:disable-next-line:member-ordering\r\n    private reco: ServiceRecognizerBase;\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n\r\n    private implDispatchMessageHandler(event: SpeechRecognitionEvent, cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        /*\r\n         Alternative syntax for typescript devs.\r\n         if (event instanceof SDK.RecognitionTriggeredEvent)\r\n        */\r\n        switch (event.Name) {\r\n            case \"RecognitionEndedEvent\":\r\n                {\r\n                    const recoEndedEvent: RecognitionEndedEvent = event as RecognitionEndedEvent;\r\n                    if (recoEndedEvent.Status !== RecognitionCompletionStatus.Success) {\r\n                        const errorText: string = RecognitionCompletionStatus[recoEndedEvent.Status] + \": \" + recoEndedEvent.Error;\r\n                        const errorEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                            CancellationReason.Error,\r\n                            errorText,\r\n                            0, /*todo*/\r\n                            recoEndedEvent.SessionId);\r\n\r\n                        if (this.canceled) {\r\n                            try {\r\n                                this.canceled(this, errorEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        const result = new SpeechRecognitionResult(\r\n                            undefined,\r\n                            ResultReason.Canceled,\r\n                            undefined, undefined, undefined,\r\n                            errorText,\r\n                            undefined, undefined);\r\n\r\n                        // report result to promise.\r\n                        if (!!cb) {\r\n                            try {\r\n                                cb(result);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (e) {\r\n                                if (!!err) {\r\n                                    err(e);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"SpeechSimplePhraseEvent\":\r\n                {\r\n                    const evResult = event as SpeechRecognitionResultEvent<ISimpleSpeechPhrase>;\r\n\r\n                    const reason = EnumTranslation.implTranslateRecognitionResult(evResult.Result.RecognitionStatus);\r\n\r\n                    const result = new SpeechRecognitionResult(\r\n                        undefined,\r\n                        reason,\r\n                        evResult.Result.DisplayText,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined,\r\n                        JSON.stringify(evResult.Result),\r\n                        undefined);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const ev = new SpeechRecognitionCanceledEventArgs(\r\n                            EnumTranslation.implTranslateCancelResult(evResult.Result.RecognitionStatus),\r\n                            undefined,\r\n                            0, /*todo*/\r\n                            evResult.SessionId);\r\n\r\n                        if (!!this.canceled) {\r\n                            try {\r\n                                this.canceled(this, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const ev = new SpeechRecognitionEventArgs(result, 0/*todo*/, evResult.SessionId);\r\n\r\n                        if (!!this.recognized) {\r\n                            try {\r\n                                this.recognized(this, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"SpeechDetailedPhraseEvent\":\r\n                {\r\n                    const evResult = event as SpeechRecognitionResultEvent<IDetailedSpeechPhrase>;\r\n\r\n                    const reason = EnumTranslation.implTranslateRecognitionResult(evResult.Result.RecognitionStatus);\r\n\r\n                    const result = new SpeechRecognitionResult(\r\n                        undefined,\r\n                        reason,\r\n                        (reason === ResultReason.RecognizedSpeech) ? evResult.Result.NBest[0].Display : undefined,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined,\r\n                        JSON.stringify(evResult.Result),\r\n                        undefined);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const ev = new SpeechRecognitionCanceledEventArgs(\r\n                            EnumTranslation.implTranslateCancelResult(evResult.Result.RecognitionStatus),\r\n                            undefined,\r\n                            0, /*todo*/\r\n                            evResult.SessionId);\r\n\r\n                        if (!!this.canceled) {\r\n                            try {\r\n                                this.canceled(this, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const ev = new SpeechRecognitionEventArgs(result, 0/*todo*/, evResult.SessionId);\r\n\r\n                        if (!!this.recognized) {\r\n                            try {\r\n                                this.recognized(this, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"SpeechHypothesisEvent\":\r\n                {\r\n                    const evResult = event as SpeechRecognitionResultEvent<ISpeechHypothesis>;\r\n\r\n                    const result = new SpeechRecognitionResult(\r\n                        undefined,\r\n                        ResultReason.RecognizingSpeech,\r\n                        evResult.Result.Text,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined,\r\n                        JSON.stringify(evResult.Result),\r\n                        undefined);\r\n\r\n                    const ev = new SpeechRecognitionEventArgs(result, 0/*todo*/, evResult.SessionId);\r\n\r\n                    if (!!this.recognizing) {\r\n                        try {\r\n                            this.recognizing(this, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"InternalErrorEvent\":\r\n                {\r\n                    const evResult: InternalErrorEvent = event as InternalErrorEvent;\r\n                    const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                        evResult.RequestId,\r\n                        ResultReason.Canceled,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        evResult.Result);\r\n                    const canceledResult: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                        CancellationReason.Error,\r\n                        result.errorDetails);\r\n\r\n                    try {\r\n                        this.canceled(this, canceledResult);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke thebundle\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IDetailedSpeechPhrase,\r\n    IIntentResponse,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    InternalErrorEvent,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechHypothesis,\r\n    PlatformConfig,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n    RecognitionMode,\r\n    RecognitionStatus2,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechRecognitionEvent,\r\n    SpeechRecognitionResultEvent,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private disposedIntentRecognizer: boolean;\r\n    private privProperties: PropertyCollection;\r\n    private reco: ServiceRecognizerBase;\r\n    private pendingIntentArgs: IntentRecognitionEventArgs;\r\n    private addedIntents: string[][];\r\n    private addedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private intentDataSent: boolean;\r\n    private umbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig);\r\n\r\n        this.intentDataSent = false;\r\n        this.addedIntents = [];\r\n        this.addedLmIntents = {};\r\n\r\n        this.disposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized. The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized, so it is suitable only for single shot recognition like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Interactive,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new IntentConnectionFactory());\r\n\r\n            let contextJson: string;\r\n\r\n            if (Object.keys(this.addedLmIntents).length !== 0 || undefined !== this.umbrellaIntent) {\r\n                contextJson = this.buildSpeechContext();\r\n                this.intentDataSent = true;\r\n            }\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedIntentRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, cb, err);\r\n            }, contextJson);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new IntentConnectionFactory());\r\n\r\n            let contextJson: string;\r\n\r\n            if (Object.keys(this.addedLmIntents).length !== 0) {\r\n                contextJson = this.buildSpeechContext();\r\n                this.intentDataSent = true;\r\n            }\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedIntentRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, undefined, undefined);\r\n            }, contextJson);\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.addedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.addedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.umbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(speecgConfig, recognitionMode, this.properties);\r\n    }\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.disposedIntentRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private implDispatchMessageHandler(event: SpeechRecognitionEvent, cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        /*\r\n         Alternative syntax for typescript devs.\r\n         if (event instanceof SDK.RecognitionTriggeredEvent)\r\n        */\r\n        switch (event.Name) {\r\n            case \"RecognitionEndedEvent\":\r\n                {\r\n                    const recoEndedEvent: RecognitionEndedEvent = event as RecognitionEndedEvent;\r\n\r\n                    if (recoEndedEvent.Status !== RecognitionCompletionStatus.Success) {\r\n                        const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                            undefined, undefined,\r\n                            ResultReason.Canceled,\r\n                            undefined, undefined, undefined,\r\n                            RecognitionCompletionStatus[recoEndedEvent.Status] + \": \" + recoEndedEvent.Error,\r\n                            undefined, undefined);\r\n\r\n                        const errorEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                            CancellationReason.Error,\r\n                            recoEndedEvent.Error,\r\n                            result,\r\n                            0, recoEndedEvent.SessionId);\r\n\r\n                        if (this.canceled) {\r\n                            try {\r\n                                this.canceled(this, errorEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!cb) {\r\n                            try {\r\n                                cb(result);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (e) {\r\n                                if (!!err) {\r\n                                    err(e);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case \"SpeechSimplePhraseEvent\":\r\n                {\r\n                    const evResult = event as SpeechRecognitionResultEvent<ISimpleSpeechPhrase>;\r\n\r\n                    const reason = EnumTranslation.implTranslateRecognitionResult(evResult.Result.RecognitionStatus);\r\n                    const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                        undefined,\r\n                        undefined,\r\n                        reason,\r\n                        evResult.Result.DisplayText,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined,\r\n                        JSON.stringify(evResult.Result),\r\n                        undefined);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const ev = new IntentRecognitionCanceledEventArgs(\r\n                            EnumTranslation.implTranslateCancelResult(evResult.Result.RecognitionStatus),\r\n                            \"\",\r\n                            result,\r\n                            0, evResult.SessionId);\r\n\r\n                        if (!!this.canceled) {\r\n                            try {\r\n                                this.canceled(this, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!cb) {\r\n                            try {\r\n                                cb(result);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (e) {\r\n                                if (!!err) {\r\n                                    err(e);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let ev = new IntentRecognitionEventArgs(result, 0 /*TODO*/, evResult.SessionId);\r\n\r\n                        const sendEvent: () => void = () => {\r\n                            if (!!this.recognized) {\r\n                                try {\r\n                                    this.recognized(this, ev);\r\n                                    /* tslint:disable:no-empty */\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n\r\n                            // report result to promise.\r\n                            if (!!cb) {\r\n                                try {\r\n                                    cb(ev.result);\r\n                                } catch (e) {\r\n                                    if (!!err) {\r\n                                        err(e);\r\n                                    }\r\n                                }\r\n                                // Only invoke the call back once.\r\n                                // and if it's successful don't invoke the\r\n                                // error after that.\r\n                                cb = undefined;\r\n                                err = undefined;\r\n                            }\r\n                        };\r\n\r\n                        const status = (RecognitionStatus2 as any)[evResult.Result.RecognitionStatus];\r\n                        if (status === RecognitionStatus2.InitialSilenceTimeout ||\r\n                            status === RecognitionStatus2.BabbleTimeout) {\r\n                            ev = new IntentRecognitionEventArgs(\r\n                                new IntentRecognitionResult(\r\n                                    ev.result.intentId,\r\n                                    ev.result.resultId,\r\n                                    ResultReason.NoMatch,\r\n                                    ev.result.text,\r\n                                    ev.result.duration,\r\n                                    ev.result.offset,\r\n                                    ev.result.errorDetails,\r\n                                    ev.result.json,\r\n                                    ev.result.properties),\r\n                                ev.offset,\r\n                                ev.sessionId);\r\n                        }\r\n\r\n                        // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                        // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                        if (false === this.intentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                            sendEvent();\r\n                        } else {\r\n                            // Squirrel away the args, when the response event arrives it will build upon them\r\n                            // and then return\r\n                            this.pendingIntentArgs = ev;\r\n\r\n                            //// Also, set a one minute delay, if the response hasn't come back, or more speech events do, move on.\r\n                            // setTimeout(() => {\r\n                            //    if (undefined !== this.pendingIntentArgs && !this.disposedIntentRecognizer) {\r\n                            //        sendEvent();\r\n                            //        this.pendingIntentArgs = undefined;\r\n                            //    }\r\n                            // }, 60000);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"SpeechHypothesisEvent\":\r\n                {\r\n                    const evResult = event as SpeechRecognitionResultEvent<ISpeechHypothesis>;\r\n\r\n                    const result = new IntentRecognitionResult(\r\n                        undefined,\r\n                        undefined,\r\n                        ResultReason.RecognizingIntent,\r\n                        evResult.Result.Text,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined,\r\n                        JSON.stringify(evResult.Result),\r\n                        undefined);\r\n\r\n                    const ev = new IntentRecognitionEventArgs(result, 0 /*TODO*/, evResult.SessionId);\r\n\r\n                    if (!!this.recognizing) {\r\n                        try {\r\n                            this.recognizing(this, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"IntentResponseEvent\":\r\n                {\r\n                    let ev: IntentRecognitionEventArgs = this.pendingIntentArgs;\r\n                    this.pendingIntentArgs = undefined;\r\n\r\n                    const evResult: SpeechRecognitionResultEvent<IIntentResponse> = event as SpeechRecognitionResultEvent<IIntentResponse>;\r\n\r\n                    if (undefined === ev) {\r\n                        // Odd... Not sure this can happen\r\n                        ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, evResult.SessionId);\r\n                    }\r\n\r\n                    // If LUIS didn't return anything, send the existing event, else\r\n                    // modify it to show the match.\r\n                    // See if the intent found is in the list of intents asked for.\r\n\r\n                    let addedIntent: AddedLmIntent = this.addedLmIntents[evResult.Result.topScoringIntent.intent];\r\n\r\n                    if (this.umbrellaIntent !== undefined) {\r\n                        addedIntent = this.umbrellaIntent;\r\n                    }\r\n\r\n                    if (null !== evResult.Result && addedIntent !== undefined) {\r\n                        const intentId = addedIntent.intentName === undefined ? evResult.Result.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, JSON.stringify(evResult.Result));\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n                    }\r\n\r\n                    if (!!this.recognized) {\r\n                        try {\r\n                            this.recognized(this, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(ev.result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n            case \"InternalErrorEvent\":\r\n                {\r\n                    const evResult: InternalErrorEvent = event as InternalErrorEvent;\r\n                    const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                        undefined,\r\n                        undefined,\r\n                        ResultReason.Canceled,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        evResult.Result);\r\n                    const canceledResult: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                        CancellationReason.Error,\r\n                        result.errorDetails,\r\n                        result);\r\n\r\n                    try {\r\n                        this.canceled(this, canceledResult);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke thebundle\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): string {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.umbrellaIntent) {\r\n            appId = this.umbrellaIntent.modelImpl.appId;\r\n            region = this.umbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.umbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.addedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.addedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return JSON.stringify({\r\n            dgi: {\r\n                ReferenceGrammars: (undefined === this.umbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n            },\r\n            intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    InternalErrorEvent,\r\n    ISimpleSpeechPhrase,\r\n    PlatformConfig,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechRecognitionEvent,\r\n    SpeechRecognitionResultEvent,\r\n    TranslationConnectionFactory,\r\n    TranslationFailedEvent,\r\n    TranslationHypothesisEvent,\r\n    TranslationPhraseEvent,\r\n    TranslationServiceRecognizer,\r\n    TranslationSynthesisErrorEvent,\r\n    TranslationSynthesisEvent,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private disposedTranslationRecognizer: boolean;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig);\r\n\r\n        this.disposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition, use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new TranslationConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedTranslationRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, cb, err);\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new TranslationConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, (event: SpeechRecognitionEvent) => {\r\n                if (this.disposedTranslationRecognizer || !this.reco) {\r\n                    return;\r\n                }\r\n\r\n                this.implDispatchMessageHandler(event, undefined, undefined);\r\n            });\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.disposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implCloseExistingRecognizer();\r\n            this.disposedTranslationRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, RecognitionMode.Conversation, this.properties);\r\n    }\r\n\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig);\r\n    }\r\n\r\n    // tslint:disable-next-line:member-ordering\r\n    private reco: ServiceRecognizerBase;\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n\r\n    private implDispatchMessageHandler(event: SpeechRecognitionEvent, cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n\r\n        if (!this.reco) {\r\n            return;\r\n        }\r\n        switch (event.Name) {\r\n            case \"RecognitionEndedEvent\":\r\n                {\r\n                    const recoEndedEvent: RecognitionEndedEvent = event as RecognitionEndedEvent;\r\n\r\n                    if (recoEndedEvent.Status !== RecognitionCompletionStatus.Success) {\r\n                        const result = new TranslationRecognitionResult(\r\n                            undefined, undefined,\r\n                            ResultReason.Canceled,\r\n                            undefined, undefined, undefined,\r\n                            RecognitionCompletionStatus[recoEndedEvent.Status] + \": \" + recoEndedEvent.Error,\r\n                            undefined, undefined);\r\n\r\n                        const errorEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                            recoEndedEvent.SessionId,\r\n                            CancellationReason.Error,\r\n                            recoEndedEvent.Error,\r\n                            result);\r\n\r\n                        if (!!this.canceled) {\r\n                            try {\r\n                                this.canceled(this, errorEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!cb) {\r\n                            try {\r\n                                cb(errorEvent.result);\r\n                            } catch (e) {\r\n                                if (!!err) {\r\n                                    err(e);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            cb = undefined;\r\n                            err = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"RecognitionFailedEvent\":\r\n                const evResult = event as SpeechRecognitionResultEvent<ISimpleSpeechPhrase>;\r\n\r\n                const reason = EnumTranslation.implTranslateRecognitionResult(evResult.Result.RecognitionStatus);\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined, undefined,\r\n                    reason,\r\n                    evResult.Result.DisplayText,\r\n                    evResult.Result.Duration,\r\n                    evResult.Result.Offset,\r\n                    undefined,\r\n                    JSON.stringify(evResult.Result),\r\n                    undefined);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const ev = new TranslationRecognitionCanceledEventArgs(\r\n                        evResult.SessionId,\r\n                        EnumTranslation.implTranslateCancelResult(evResult.Result.RecognitionStatus),\r\n                        null,\r\n                        result);\r\n\r\n                    if (!!this.canceled) {\r\n                        try {\r\n                            this.canceled(this, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                } else {\r\n                    const ev = new TranslationRecognitionEventArgs(result, 0/*offset*/, evResult.SessionId);\r\n\r\n                    if (!!this.recognized) {\r\n                        try {\r\n                            this.recognized(this, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(result);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    cb = undefined;\r\n                    err = undefined;\r\n                }\r\n\r\n                break;\r\n            case \"TranslationPhraseEvent\":\r\n                {\r\n                    const evResult = event as TranslationPhraseEvent;\r\n                    const result: TranslationRecognitionEventArgs = this.FireEventForResult(evResult);\r\n\r\n                    if (!!this.recognized) {\r\n                        try {\r\n                            this.recognized(this, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result.result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n            case \"TranslationHypothesisEvent\":\r\n                {\r\n                    const evResult = event as TranslationHypothesisEvent;\r\n\r\n                    const result: TranslationRecognitionEventArgs = this.FireEventForResult(evResult);\r\n\r\n                    if (!!this.recognizing) {\r\n                        try {\r\n                            this.recognizing(this, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"TranslationFailedEvent\":\r\n                {\r\n                    const evResult = event as TranslationFailedEvent;\r\n\r\n                    const result = new TranslationRecognitionResult(\r\n                        undefined, undefined,\r\n                        ResultReason.RecognizedSpeech,\r\n                        evResult.Result.Text,\r\n                        evResult.Result.Duration,\r\n                        evResult.Result.Offset,\r\n                        undefined, undefined, undefined);\r\n\r\n                    const retEvent: TranslationRecognitionEventArgs = new TranslationRecognitionEventArgs(result, 0 /*todo*/, evResult.SessionId);\r\n\r\n                    if (!!this.recognized) {\r\n                        try {\r\n                            this.recognized(this, retEvent);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(retEvent.result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke thebundle\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n            case \"TranslationSynthesisEvent\":\r\n                {\r\n                    const evResut: TranslationSynthesisEvent = event as TranslationSynthesisEvent;\r\n\r\n                    const audio = evResut.Result;\r\n                    const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n                    const result = new TranslationSynthesisResult(reason, audio);\r\n                    const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, evResut.SessionId);\r\n\r\n                    if (!!this.synthesizing) {\r\n                        try {\r\n                            this.synthesizing(this, retEvent);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"TranslationSynthesisErrorEvent\":\r\n                {\r\n                    const evResult: TranslationSynthesisErrorEvent = event as TranslationSynthesisErrorEvent;\r\n\r\n                    const result = new TranslationSynthesisResult(evResult.Result.SynthesisStatus, undefined);\r\n                    const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, evResult.SessionId);\r\n\r\n                    if (!!this.synthesizing) {\r\n                        try {\r\n                            this.synthesizing(this, retEvent);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.canceled) {\r\n                        // And raise a canceled event to send the rich(er) error message back.\r\n                        const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                            evResult.SessionId,\r\n                            CancellationReason.Error,\r\n                            evResult.Result.FailureReason,\r\n                            null);\r\n\r\n                        try {\r\n                            this.canceled(this, canceledResult);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"InternalErrorEvent\":\r\n                {\r\n                    const evResult: InternalErrorEvent = event as InternalErrorEvent;\r\n                    const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                        undefined,\r\n                        evResult.RequestId,\r\n                        ResultReason.Canceled,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        evResult.Result);\r\n                    const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                        evResult.SessionId,\r\n                        CancellationReason.Error,\r\n                        result.errorDetails,\r\n                        result);\r\n\r\n                    try {\r\n                        this.canceled(this, canceledResult);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb(result);\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke thebundle\r\n                        // error after that.\r\n                        cb = undefined;\r\n                        err = undefined;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private FireEventForResult(evResult: TranslationPhraseEvent | TranslationHypothesisEvent): TranslationRecognitionEventArgs {\r\n        const translations = new Translations();\r\n        for (const translation of evResult.Result.Translation.Translations) {\r\n            translations.set(translation.Language, translation.Text);\r\n        }\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            undefined,\r\n            evResult instanceof TranslationPhraseEvent ? ResultReason.TranslatedSpeech : ResultReason.TranslatingSpeech,\r\n            evResult.Result.Text,\r\n            evResult.Result.Duration,\r\n            evResult.Result.Offset,\r\n            undefined,\r\n            JSON.stringify(evResult.Result),\r\n            undefined);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, 0, evResult.SessionId);\r\n        return ev;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyCollection } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translation\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private map: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translation.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.map.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translation.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.map.setProperty(key, value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Translations.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence, and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise, and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/NoMatchReason.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    ISimpleSpeechPhrase,\r\n    RecognitionStatus2,\r\n} from \"../../src/common.speech/Exports\";\r\nimport {\r\n    IntentRecognitionResult,\r\n    NoMatchReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionResult,\r\n} from \"./Exports\";\r\nimport { RecognitionResult } from \"./RecognitionResult\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult} result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: ISimpleSpeechPhrase = JSON.parse(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        const realReason = (RecognitionStatus2 as any)[simpleSpeech.RecognitionStatus];\r\n\r\n        switch (realReason) {\r\n            case RecognitionStatus2.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus2.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/NoMatchDetails.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationReason,\r\n    TranslationRecognitionResult,\r\n} from \"./Exports\";\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(sessionid: string, cancellationReason: CancellationReason, errorDetails: string, result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionCanceledEventArgs.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationReason,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    PropertyCollection,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string, result?: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionCanceledEventArgs.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    ISimpleSpeechPhrase,\r\n    RecognitionStatus2,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationReason,\r\n    RecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    private constructor(reason: CancellationReason, errorDetails: string) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n\r\n        if (!!result.json) {\r\n            const simpleSpeech: ISimpleSpeechPhrase = JSON.parse(result.json);\r\n\r\n            const recognitionStatus2: string = \"\" + simpleSpeech.RecognitionStatus;\r\n            const recstatus2 = (RecognitionStatus2 as any)[recognitionStatus2];\r\n            switch (recstatus2) {\r\n                case RecognitionStatus2.Success:\r\n                case RecognitionStatus2.EndOfDictation:\r\n                case RecognitionStatus2.NoMatch:\r\n                    reason = CancellationReason.EndOfStream;\r\n                    break;\r\n                case RecognitionStatus2.InitialSilenceTimeout:\r\n                case RecognitionStatus2.BabbleTimeout:\r\n                case RecognitionStatus2.Error:\r\n                default:\r\n                    reason = CancellationReason.Error;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails);\r\n\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member CancellationDetails.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/CancellationDetails.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport { AudioStreamFormat } from \"../../src/sdk/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\n\r\nimport { Timer } from \"../common.browser/Exports\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    // Recommended sample rate (bytes/second).\r\n    private static readonly SAMPLE_RATE: number = 16000 * 2; // 16 kHz * 16 bits\r\n\r\n    // We should stream audio at no faster than 2x real-time (i.e., send five chunks\r\n    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).\r\n    private static readonly CHUNK_SIZE: number = FileAudioSource.SAMPLE_RATE * 2 / 5;\r\n\r\n    private static readonly UPLOAD_INTERVAL: number = 200; // milliseconds\r\n\r\n    // 10 seconds of audio in bytes =\r\n    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).\r\n    private static readonly MAX_SIZE: number = FileAudioSource.SAMPLE_RATE * 600 + 44;\r\n\r\n    private static readonly FILEFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getWaveFormatPCM(16000, 16, 1) as AudioStreamFormatImpl;\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<AudioSourceEvent>;\r\n\r\n    private file: File;\r\n\r\n    public constructor(file: File, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.file = file;\r\n    }\r\n\r\n    public get Format(): AudioStreamFormat {\r\n        return FileAudioSource.FILEFORMAT;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (typeof FileReader === \"undefined\") {\r\n            const errorMsg = \"Browser does not support FileReader.\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        } else if (this.file.name.lastIndexOf(\".wav\") !== this.file.name.length - 4) {\r\n            const errorMsg = this.file.name + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        } else if (this.file.size > FileAudioSource.MAX_SIZE) {\r\n            const errorMsg = this.file.name + \" exceeds the maximum allowed file size (\" + FileAudioSource.MAX_SIZE + \").\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Upload(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream && !stream.IsClosed) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Upload = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                const reader: FileReader = new FileReader();\r\n\r\n                let startOffset = 0;\r\n                let endOffset = FileAudioSource.CHUNK_SIZE;\r\n                let lastWriteTimestamp = 0;\r\n\r\n                const processNextChunk = (event: Event): void => {\r\n                    if (stream.IsClosed) {\r\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                    }\r\n\r\n                    if (lastWriteTimestamp !== 0) {\r\n                        const delay = Date.now() - lastWriteTimestamp;\r\n                        if (delay < FileAudioSource.UPLOAD_INTERVAL) {\r\n                            // It's been less than the \"upload interval\" since we've uploaded the\r\n                            // last chunk. Schedule the next upload to make sure that we're sending\r\n                            // upstream roughly one chunk per upload interval.\r\n                            new Timer(FileAudioSource.UPLOAD_INTERVAL - delay, processNextChunk).start();\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    stream.Write(reader.result as ArrayBuffer);\r\n                    lastWriteTimestamp = Date.now();\r\n\r\n                    if (endOffset < this.file.size) {\r\n                        startOffset = endOffset;\r\n                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.file.size);\r\n                        const chunk = this.file.slice(startOffset, endOffset);\r\n                        reader.readAsArrayBuffer(chunk);\r\n                    } else {\r\n                        // we've written the entire file to the output stream, can close it now.\r\n                        stream.Close();\r\n                    }\r\n                };\r\n\r\n                reader.onload = processNextChunk;\r\n\r\n                reader.onerror = (event: ErrorEvent) => {\r\n                    const errorMsg = `Error occurred while processing '${this.file.name}'. ${event.error}`;\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, event.error));\r\n                    throw new Error(errorMsg);\r\n                };\r\n\r\n                const chunk = this.file.slice(startOffset, endOffset);\r\n                reader.readAsArrayBuffer(chunk);\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/FileAudioSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// getting around the build error for MediaRecorder as Typescript does not have a definition for this one.\r\ndeclare var MediaRecorder: any;\r\n\r\nexport class OpusRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n    private mediaRecorderOptions: any;\r\n\r\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\r\n        this.mediaRecorderOptions = options;\r\n    }\r\n\r\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\r\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\r\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\r\n            if (outputStream) {\r\n                const reader = new FileReader();\r\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\r\n                reader.onloadend = (event: ProgressEvent) => {\r\n                    outputStream.Write(reader.result as ArrayBuffer);\r\n                };\r\n            }\r\n        };\r\n\r\n        this.mediaResources = {\r\n            recorder: mediaRecorder,\r\n            stream: mediaStream,\r\n        };\r\n        mediaRecorder.start(timeslice);\r\n    }\r\n\r\n    public ReleaseMediaResources = (context: AudioContext): void => {\r\n        if (this.mediaResources.recorder.state !== \"inactive\") {\r\n            this.mediaResources.recorder.stop();\r\n        }\r\n        this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    stream: MediaStream;\r\n    recorder: any;\r\n}\r\n\r\n/* Declaring this inline to avoid compiler warnings\r\ndeclare class MediaRecorder {\r\n    constructor(mediaStream: MediaStream, options: any);\r\n\r\n    public state: string;\r\n\r\n    public ondataavailable(dataAvailableEvent: any): void;\r\n    public stop(): void;\r\n}*/\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/OpusRecorder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n\r\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\r\n        const scriptNode = (() => {\r\n            let bufferSize = 0;\r\n            try {\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            } catch (error) {\r\n                // Webkit (<= version 31) requires a valid bufferSize.\r\n                bufferSize = 2048;\r\n                let audioSampleRate = context.sampleRate;\r\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                    bufferSize <<= 1 ;\r\n                    audioSampleRate >>= 1;\r\n                }\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            }\r\n        })();\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n        const that = this;\r\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n            const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n            if (outputStream && !outputStream.IsClosed) {\r\n                const waveFrame = waveStreamEncoder.Encode(needHeader, inputFrame);\r\n                if (!!waveFrame) {\r\n                    outputStream.Write(waveFrame);\r\n                    needHeader = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        this.mediaResources = {\r\n            scriptProcessorNode: scriptNode,\r\n            source: micInput,\r\n            stream: mediaStream,\r\n        };\r\n\r\n        micInput.connect(scriptNode);\r\n        scriptNode.connect(context.destination);\r\n    }\r\n\r\n    public ReleaseMediaResources = (context: AudioContext): void => {\r\n        if (this.mediaResources) {\r\n            if (this.mediaResources.scriptProcessorNode) {\r\n                this.mediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.mediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.mediaResources.source) {\r\n                this.mediaResources.source.disconnect();\r\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.mediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode;\r\n    stream: MediaStream;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/PCMRecorder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class SessionStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = sessionStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            sessionStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.removeItem(key);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/SessionStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ITimer } from \"../common/Exports\";\r\n\r\nexport class Timer implements ITimer {\r\n    private delayInMillisec: number;\r\n    private timerId: number;\r\n    private successCallback: any;\r\n    constructor(delayInMillisec: number, successCallback: any) {\r\n        this.delayInMillisec = delayInMillisec;\r\n        this.successCallback = successCallback;\r\n    }\r\n    public start = (...params: any[]): void => {\r\n        if (this.timerId) {\r\n            this.stop();\r\n        }\r\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\r\n    }\r\n\r\n    public stop = (): void => {\r\n        clearTimeout(this.timerId);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/Timer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    PlatformEvent,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private uri: string;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private connectionMessageAdapter: WebsocketMessageAdapter;\r\n    private id: string;\r\n    private isDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.messageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.uri = uri + queryParams;\r\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\r\n\r\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.uri,\r\n            this.Id,\r\n            this.messageFormatter);\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n\r\n        if (this.connectionMessageAdapter) {\r\n            this.connectionMessageAdapter.Close();\r\n        }\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public State = (): ConnectionState => {\r\n        return this.connectionMessageAdapter.State;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.connectionMessageAdapter.Open();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        return this.connectionMessageAdapter.Send(message);\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        return this.connectionMessageAdapter.Read();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionMessageAdapter.Events;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/WebsocketConnection.ts"],"sourceRoot":""}