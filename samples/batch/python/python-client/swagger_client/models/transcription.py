# coding: utf-8

"""
    Speech Services API v2.0

    Speech Services API v2.0.  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: crservice@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.model import Model  # noqa: F401,E501


class Transcription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'models': 'list[Model]',
        'id': 'str',
        'recordings_url': 'str',
        'locale': 'str',
        'results_urls': 'dict(str, str)',
        'status_message': 'str',
        'created_date_time': 'datetime',
        'last_action_date_time': 'datetime',
        'status': 'str',
        'name': 'str',
        'description': 'str',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'models': 'models',
        'id': 'id',
        'recordings_url': 'recordingsUrl',
        'locale': 'locale',
        'results_urls': 'resultsUrls',
        'status_message': 'statusMessage',
        'created_date_time': 'createdDateTime',
        'last_action_date_time': 'lastActionDateTime',
        'status': 'status',
        'name': 'name',
        'description': 'description',
        'properties': 'properties'
    }

    def __init__(self, models=None, id=None, recordings_url=None, locale=None, results_urls=None, status_message=None, created_date_time=None, last_action_date_time=None, status=None, name=None, description=None, properties=None):  # noqa: E501
        """Transcription - a model defined in Swagger"""  # noqa: E501

        self._models = None
        self._id = None
        self._recordings_url = None
        self._locale = None
        self._results_urls = None
        self._status_message = None
        self._created_date_time = None
        self._last_action_date_time = None
        self._status = None
        self._name = None
        self._description = None
        self._properties = None
        self.discriminator = None

        self.models = models
        self.id = id
        self.recordings_url = recordings_url
        if locale is not None:
            self.locale = locale
        if results_urls is not None:
            self.results_urls = results_urls
        if status_message is not None:
            self.status_message = status_message
        self.created_date_time = created_date_time
        self.last_action_date_time = last_action_date_time
        self.status = status
        self.name = name
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties

    @property
    def models(self):
        """Gets the models of this Transcription.  # noqa: E501

        A list of models used for the transcription.  The list may contain an acoustic model, a language model or both.  IF only one model is given, the base model will be used for the other part  # noqa: E501

        :return: The models of this Transcription.  # noqa: E501
        :rtype: list[Model]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Transcription.

        A list of models used for the transcription.  The list may contain an acoustic model, a language model or both.  IF only one model is given, the base model will be used for the other part  # noqa: E501

        :param models: The models of this Transcription.  # noqa: E501
        :type: list[Model]
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")  # noqa: E501

        self._models = models

    @property
    def id(self):
        """Gets the id of this Transcription.  # noqa: E501

        The identifier of this entity  # noqa: E501

        :return: The id of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transcription.

        The identifier of this entity  # noqa: E501

        :param id: The id of this Transcription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def recordings_url(self):
        """Gets the recordings_url of this Transcription.  # noqa: E501

        The location where to download the input data from  # noqa: E501

        :return: The recordings_url of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._recordings_url

    @recordings_url.setter
    def recordings_url(self, recordings_url):
        """Sets the recordings_url of this Transcription.

        The location where to download the input data from  # noqa: E501

        :param recordings_url: The recordings_url of this Transcription.  # noqa: E501
        :type: str
        """
        if recordings_url is None:
            raise ValueError("Invalid value for `recordings_url`, must not be `None`")  # noqa: E501

        self._recordings_url = recordings_url

    @property
    def locale(self):
        """Gets the locale of this Transcription.  # noqa: E501

        The locale of the contained data  # noqa: E501

        :return: The locale of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Transcription.

        The locale of the contained data  # noqa: E501

        :param locale: The locale of this Transcription.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def results_urls(self):
        """Gets the results_urls of this Transcription.  # noqa: E501

        The results Urls for the transcription  # noqa: E501

        :return: The results_urls of this Transcription.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._results_urls

    @results_urls.setter
    def results_urls(self, results_urls):
        """Sets the results_urls of this Transcription.

        The results Urls for the transcription  # noqa: E501

        :param results_urls: The results_urls of this Transcription.  # noqa: E501
        :type: dict(str, str)
        """

        self._results_urls = results_urls

    @property
    def status_message(self):
        """Gets the status_message of this Transcription.  # noqa: E501

        The failure reason for the transcription  # noqa: E501

        :return: The status_message of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Transcription.

        The failure reason for the transcription  # noqa: E501

        :param status_message: The status_message of this Transcription.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def created_date_time(self):
        """Gets the created_date_time of this Transcription.  # noqa: E501

        The time-stamp when the object was created  # noqa: E501

        :return: The created_date_time of this Transcription.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this Transcription.

        The time-stamp when the object was created  # noqa: E501

        :param created_date_time: The created_date_time of this Transcription.  # noqa: E501
        :type: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    @property
    def last_action_date_time(self):
        """Gets the last_action_date_time of this Transcription.  # noqa: E501

        The time-stamp when the current status was entered  # noqa: E501

        :return: The last_action_date_time of this Transcription.  # noqa: E501
        :rtype: datetime
        """
        return self._last_action_date_time

    @last_action_date_time.setter
    def last_action_date_time(self, last_action_date_time):
        """Sets the last_action_date_time of this Transcription.

        The time-stamp when the current status was entered  # noqa: E501

        :param last_action_date_time: The last_action_date_time of this Transcription.  # noqa: E501
        :type: datetime
        """
        if last_action_date_time is None:
            raise ValueError("Invalid value for `last_action_date_time`, must not be `None`")  # noqa: E501

        self._last_action_date_time = last_action_date_time

    @property
    def status(self):
        """Gets the status of this Transcription.  # noqa: E501

        The status of the object  # noqa: E501

        :return: The status of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transcription.

        The status of the object  # noqa: E501

        :param status: The status of this Transcription.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Succeeded", "NotStarted", "Running", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this Transcription.  # noqa: E501

        The name of the object  # noqa: E501

        :return: The name of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Transcription.

        The name of the object  # noqa: E501

        :param name: The name of this Transcription.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Transcription.  # noqa: E501

        The description of the object  # noqa: E501

        :return: The description of this Transcription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transcription.

        The description of the object  # noqa: E501

        :param description: The description of this Transcription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this Transcription.  # noqa: E501

        The custom properties of this entity  # noqa: E501

        :return: The properties of this Transcription.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Transcription.

        The custom properties of this entity  # noqa: E501

        :param properties: The properties of this Transcription.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transcription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transcription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
