# coding: utf-8

"""
    Speech Services API v2.0

    Speech Services API v2.0.  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: crservice@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.model import Model  # noqa: F401,E501


class VoiceTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'audio_uri': 'str',
        'text_uri': 'str',
        'created_date_time': 'datetime',
        'last_action_date_time': 'datetime',
        'status': 'str',
        'model': 'Model',
        'voice_test_kind': 'str'
    }

    attribute_map = {
        'id': 'id',
        'audio_uri': 'audioUri',
        'text_uri': 'textUri',
        'created_date_time': 'createdDateTime',
        'last_action_date_time': 'lastActionDateTime',
        'status': 'status',
        'model': 'model',
        'voice_test_kind': 'voiceTestKind'
    }

    def __init__(self, id=None, audio_uri=None, text_uri=None, created_date_time=None, last_action_date_time=None, status=None, model=None, voice_test_kind=None):  # noqa: E501
        """VoiceTest - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._audio_uri = None
        self._text_uri = None
        self._created_date_time = None
        self._last_action_date_time = None
        self._status = None
        self._model = None
        self._voice_test_kind = None
        self.discriminator = None

        self.id = id
        if audio_uri is not None:
            self.audio_uri = audio_uri
        self.text_uri = text_uri
        self.created_date_time = created_date_time
        self.last_action_date_time = last_action_date_time
        self.status = status
        self.model = model
        self.voice_test_kind = voice_test_kind

    @property
    def id(self):
        """Gets the id of this VoiceTest.  # noqa: E501

        The identifier of this entity  # noqa: E501

        :return: The id of this VoiceTest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VoiceTest.

        The identifier of this entity  # noqa: E501

        :param id: The id of this VoiceTest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def audio_uri(self):
        """Gets the audio_uri of this VoiceTest.  # noqa: E501

        The audio URI of the voice test  # noqa: E501

        :return: The audio_uri of this VoiceTest.  # noqa: E501
        :rtype: str
        """
        return self._audio_uri

    @audio_uri.setter
    def audio_uri(self, audio_uri):
        """Sets the audio_uri of this VoiceTest.

        The audio URI of the voice test  # noqa: E501

        :param audio_uri: The audio_uri of this VoiceTest.  # noqa: E501
        :type: str
        """

        self._audio_uri = audio_uri

    @property
    def text_uri(self):
        """Gets the text_uri of this VoiceTest.  # noqa: E501

        The text URI of the voice test  # noqa: E501

        :return: The text_uri of this VoiceTest.  # noqa: E501
        :rtype: str
        """
        return self._text_uri

    @text_uri.setter
    def text_uri(self, text_uri):
        """Sets the text_uri of this VoiceTest.

        The text URI of the voice test  # noqa: E501

        :param text_uri: The text_uri of this VoiceTest.  # noqa: E501
        :type: str
        """
        if text_uri is None:
            raise ValueError("Invalid value for `text_uri`, must not be `None`")  # noqa: E501

        self._text_uri = text_uri

    @property
    def created_date_time(self):
        """Gets the created_date_time of this VoiceTest.  # noqa: E501

        The time-stamp when the object was created  # noqa: E501

        :return: The created_date_time of this VoiceTest.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this VoiceTest.

        The time-stamp when the object was created  # noqa: E501

        :param created_date_time: The created_date_time of this VoiceTest.  # noqa: E501
        :type: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    @property
    def last_action_date_time(self):
        """Gets the last_action_date_time of this VoiceTest.  # noqa: E501

        The time-stamp when the current status was entered  # noqa: E501

        :return: The last_action_date_time of this VoiceTest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_action_date_time

    @last_action_date_time.setter
    def last_action_date_time(self, last_action_date_time):
        """Sets the last_action_date_time of this VoiceTest.

        The time-stamp when the current status was entered  # noqa: E501

        :param last_action_date_time: The last_action_date_time of this VoiceTest.  # noqa: E501
        :type: datetime
        """
        if last_action_date_time is None:
            raise ValueError("Invalid value for `last_action_date_time`, must not be `None`")  # noqa: E501

        self._last_action_date_time = last_action_date_time

    @property
    def status(self):
        """Gets the status of this VoiceTest.  # noqa: E501

        The status of the object  # noqa: E501

        :return: The status of this VoiceTest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VoiceTest.

        The status of the object  # noqa: E501

        :param status: The status of this VoiceTest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Succeeded", "NotStarted", "Running", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def model(self):
        """Gets the model of this VoiceTest.  # noqa: E501

        Information about the models used in the voice test  # noqa: E501

        :return: The model of this VoiceTest.  # noqa: E501
        :rtype: Model
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VoiceTest.

        Information about the models used in the voice test  # noqa: E501

        :param model: The model of this VoiceTest.  # noqa: E501
        :type: Model
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def voice_test_kind(self):
        """Gets the voice_test_kind of this VoiceTest.  # noqa: E501

        The kind of this test (e.g. Text, SSML)  # noqa: E501

        :return: The voice_test_kind of this VoiceTest.  # noqa: E501
        :rtype: str
        """
        return self._voice_test_kind

    @voice_test_kind.setter
    def voice_test_kind(self, voice_test_kind):
        """Sets the voice_test_kind of this VoiceTest.

        The kind of this test (e.g. Text, SSML)  # noqa: E501

        :param voice_test_kind: The voice_test_kind of this VoiceTest.  # noqa: E501
        :type: str
        """
        if voice_test_kind is None:
            raise ValueError("Invalid value for `voice_test_kind`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Text", "SSML"]  # noqa: E501
        if voice_test_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_test_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(voice_test_kind, allowed_values)
            )

        self._voice_test_kind = voice_test_kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoiceTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoiceTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
