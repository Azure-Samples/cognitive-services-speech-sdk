# coding: utf-8

"""
    Speech Services API v2.0

    Speech Services API v2.0.  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: crservice@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.model_identity import ModelIdentity  # noqa: F401,E501


class VoiceTestDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'model': 'ModelIdentity',
        'voice_test_kind': 'str'
    }

    attribute_map = {
        'text': 'text',
        'model': 'model',
        'voice_test_kind': 'voiceTestKind'
    }

    def __init__(self, text=None, model=None, voice_test_kind=None):  # noqa: E501
        """VoiceTestDefinition - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._model = None
        self._voice_test_kind = None
        self.discriminator = None

        self.text = text
        self.model = model
        self.voice_test_kind = voice_test_kind

    @property
    def text(self):
        """Gets the text of this VoiceTestDefinition.  # noqa: E501

        Information about the text used in the voice test  # noqa: E501

        :return: The text of this VoiceTestDefinition.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this VoiceTestDefinition.

        Information about the text used in the voice test  # noqa: E501

        :param text: The text of this VoiceTestDefinition.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def model(self):
        """Gets the model of this VoiceTestDefinition.  # noqa: E501

        Information about the models used in the voice test  # noqa: E501

        :return: The model of this VoiceTestDefinition.  # noqa: E501
        :rtype: ModelIdentity
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VoiceTestDefinition.

        Information about the models used in the voice test  # noqa: E501

        :param model: The model of this VoiceTestDefinition.  # noqa: E501
        :type: ModelIdentity
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def voice_test_kind(self):
        """Gets the voice_test_kind of this VoiceTestDefinition.  # noqa: E501

        The kind of this test (e.g. Text, SSML)  # noqa: E501

        :return: The voice_test_kind of this VoiceTestDefinition.  # noqa: E501
        :rtype: str
        """
        return self._voice_test_kind

    @voice_test_kind.setter
    def voice_test_kind(self, voice_test_kind):
        """Sets the voice_test_kind of this VoiceTestDefinition.

        The kind of this test (e.g. Text, SSML)  # noqa: E501

        :param voice_test_kind: The voice_test_kind of this VoiceTestDefinition.  # noqa: E501
        :type: str
        """
        if voice_test_kind is None:
            raise ValueError("Invalid value for `voice_test_kind`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Text", "SSML"]  # noqa: E501
        if voice_test_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_test_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(voice_test_kind, allowed_values)
            )

        self._voice_test_kind = voice_test_kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoiceTestDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoiceTestDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
