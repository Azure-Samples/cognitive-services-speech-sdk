// <auto-generated />
using System;
using Connector.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Connector.Migrations
{
    [DbContext(typeof(IngestionClientDbContext))]
    [Migration("20221104081113_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Connector.Database.Models.CombinedRecognizedPhrase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("Display")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lexical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaskedItn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SentimentNegative")
                        .HasColumnType("float");

                    b.Property<double>("SentimentNeutral")
                        .HasColumnType("float");

                    b.Property<double>("SentimentPositive")
                        .HasColumnType("float");

                    b.Property<Guid?>("TranscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TranscriptionId");

                    b.ToTable("CombinedRecognizedPhrases");
                });

            modelBuilder.Entity("Connector.Database.Models.NBest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("Display")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lexical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaskedItn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RecognizedPhraseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SentimentNegative")
                        .HasColumnType("float");

                    b.Property<double>("SentimentNeutral")
                        .HasColumnType("float");

                    b.Property<double>("SentimentPositive")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RecognizedPhraseId");

                    b.ToTable("NBests");
                });

            modelBuilder.Entity("Connector.Database.Models.RecognizedPhrase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<Guid?>("CombinedRecognizedPhraseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Offset")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RecognitionStatus")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<double>("SilenceBetweenCurrentAndPreviousSegmentInMs")
                        .HasColumnType("float");

                    b.Property<int>("Speaker")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombinedRecognizedPhraseId");

                    b.ToTable("RecognizedPhrases");
                });

            modelBuilder.Entity("Connector.Database.Models.Transcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<float>("ApproximateCost")
                        .HasColumnType("real");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("DurationInSeconds")
                        .HasColumnType("float");

                    b.Property<string>("Locale")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NumberOfChannels")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("Connector.Database.Models.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("NBestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Offset")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WordText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Word");

                    b.HasKey("Id");

                    b.HasIndex("NBestId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Connector.Database.Models.CombinedRecognizedPhrase", b =>
                {
                    b.HasOne("Connector.Database.Models.Transcription", null)
                        .WithMany("CombinedRecognizedPhrases")
                        .HasForeignKey("TranscriptionId");
                });

            modelBuilder.Entity("Connector.Database.Models.NBest", b =>
                {
                    b.HasOne("Connector.Database.Models.RecognizedPhrase", null)
                        .WithMany("NBests")
                        .HasForeignKey("RecognizedPhraseId");
                });

            modelBuilder.Entity("Connector.Database.Models.RecognizedPhrase", b =>
                {
                    b.HasOne("Connector.Database.Models.CombinedRecognizedPhrase", null)
                        .WithMany("RecognizedPhrases")
                        .HasForeignKey("CombinedRecognizedPhraseId");
                });

            modelBuilder.Entity("Connector.Database.Models.Word", b =>
                {
                    b.HasOne("Connector.Database.Models.NBest", null)
                        .WithMany("Words")
                        .HasForeignKey("NBestId");
                });

            modelBuilder.Entity("Connector.Database.Models.CombinedRecognizedPhrase", b =>
                {
                    b.Navigation("RecognizedPhrases");
                });

            modelBuilder.Entity("Connector.Database.Models.NBest", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Connector.Database.Models.RecognizedPhrase", b =>
                {
                    b.Navigation("NBests");
                });

            modelBuilder.Entity("Connector.Database.Models.Transcription", b =>
                {
                    b.Navigation("CombinedRecognizedPhrases");
                });
#pragma warning restore 612, 618
        }
    }
}
